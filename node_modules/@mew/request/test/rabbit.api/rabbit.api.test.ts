import {RabbitApi} from "../../src/main";
import axios from "axios";

const service = axios.create({
    baseURL: 'https://rabbitmq.mew-iot.cn',
    // adapter: axiosAdapterUniapp,
    timeout: 10000,
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Basic Ym9vaGVyOnNtYXJ0',
        'Access-Control-Allow-Origin': '*'
    }
})


describe('rabbitmq',()=>{
    let rabbit
    beforeAll(async()=>{
        rabbit = new RabbitApi(service)
        await rabbit.bind('052111001.0','052111001.0.*.web','*.web.#')
    })
    test(`rabbitmq newExchange`, async() => {
        const res = await rabbit.newExchange('test')
        // console.log(res)
        expect(res).toBe('')
    },2000)
    test(`rabbitmq deleteExchange`, async() => {
        const res = await rabbit.deleteExchange('test')
        // console.log(res)
        expect(res).toBe('')
    },2000)
    test(`rabbitmq newQueue`, async() => {
        const res = await rabbit.newQueue('test')
        // console.log(res)
        expect(res).toBe('')
    },2000)
    test(`rabbitmq deleteQueue`, async() => {
        const res = await rabbit.deleteQueue('test')
        // console.log(res)
        expect(res).toBe('')
    },2000)

    // 97 /api/exchanges/%2f/052111001.0/publish {
    //     properties: {},
    //     routing_key: '052111001.0.*.web',
    //         payload: '{"location":"A01-02","status":true}',
    //         payload_encoding: 'string'
    // }
    // 97 /api/exchanges/%2f//publish {
    // properties: {},
    // routing_key: '052111001.0.*.web',
    //     payload: '{"location":"A01-02","status":true}',
    //     payload_encoding: 'string'
    // }
    test(`rabbitmq publish exchange`, async() => {
        // const json ={"properties":{},"routing_key":"052111001.0.*.web","payload":'{"location":"A01-02","status":true}',"payload_encoding":"string"}
        const json ={
            properties: {},
            routing_key: '052111001.0.*.web',
            payload: '{"location":"A01-02","status":true}',
            payload_encoding: 'string'
        }
        const res = await rabbit.pubToExchanges(json)
        console.log(res)
        expect(res.routed).toBe(true)
    },2000)

    test(`rabbitmq getMessage`, async() => {
        const res = await rabbit.getLockStatus('A01-01')
        // console.log(res)
        // expect(res.index).toBeGreaterThan(0)
        // expect(res.status).toBe(false)
    },2000)
})
