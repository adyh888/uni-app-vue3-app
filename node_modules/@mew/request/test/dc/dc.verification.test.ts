import {AuthData, Mc} from "../../src/ms/mc";
import {Dc, VerificationInsertProperty, VerificationSelectProperty, VerificationUpdateProperty} from "../../src/ms/dc";
import axios from "axios";

// const baseURL = 'http://www.mew-iot.cn:51000'
const baseURL = 'http://www.mew-iot.cn:51000'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let dc

describe('dc', () => {
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        dc = Dc(service)
    })

    const id=1, phoneNo='15895035525', deviceId='022111001', time= 10

    test('verification表删除id=1的验证码',async () => {
        const res = await dc.verification.delete({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    })

    // const json:VerificationInsertProperty = {id, deviceId, phoneNo, time}
    // test('/dc/verification/password发送deviceId=022111001的密码',async () => {
    //     const {dc} = getInstance(BaseURL, AxiosEnv.default, authData.access_token)
    //     const res = await dc.verification.password(json)
    //     expect(res.code).toBe(0)
    //     expect(res.msg).toBe('success')
    //     expect(res.data.length).toBe(1)
    //     expect(res.data[0].id).toBe(1)
    //     expect(res.data[0].deviceId).toBe(json.deviceId)
    //     expect(res.data[0].phoneNo).toBe(json.phoneNo)
    // },2000)

    // test('/dc/verification/password向不存在的设备号发送验证码',async () => {
    //     const {dc} = getInstance(BaseURL, AxiosEnv.default, authData.access_token)
    //     const res = await dc.verification.password({id: 2, deviceId: '022111003', phoneNo, time})
    //     expect(res.code).toBe(1)
    //     expect(res.msg).toBe('fail')
    // },2000)

    test('verification表增加',async () => {
        const res = await dc.verification.insert({id, time, deviceId, drawerId: '02211100101'})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].time).toBe(10)
        expect(res.data[0].deviceId).toBe('022111001')
        expect(res.data[0].drawerId).toBe('02211100101')
    },2000)

    test('verification表修改',async () => {
        const json:VerificationUpdateProperty = {id, deviceId, verificationCode: '1234'}
        const res = await dc.verification.update(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].deviceId).toBe(json.deviceId)
        expect(res.data[0].verificationCode).toBe(json.verificationCode)
    },2000)

    test('verification表查询',async () => {
        const json:VerificationSelectProperty = {id, deviceId, verificationCode: '1234'}
        const res = await dc.verification.select(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].deviceId).toBe(json.deviceId)
        expect(res.data[0].verificationCode).toBe(json.verificationCode)
    },2000)
})
