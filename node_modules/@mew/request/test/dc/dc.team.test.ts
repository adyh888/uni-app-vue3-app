import {AuthData, Mc} from "../../src/ms/mc";
import {Company, Dc, Department, Group, Team, TeamInsertProperty} from "../../src/ms/dc";
import axios from "axios";

const baseURL = 'https://api.mew-iot.cn'
// const baseURL = 'http://www.mew-iot.cn:51000'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let dc

describe('dc', () => {
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        dc = Dc(service)
    })

    const id=1, departmentId=1

    test('team删除name=测试班组1',async () => {
        const res =await dc.team.delete({id: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        // expect(res.data[0].id).toBe(2)
    },2000)

    test(`确保team表中id=1的name=测试班组`, async() => {
        const res= await dc.team.select({name: '测试班组'})
        // 如果数据不存在，在team表增加name=测试班组
        if (res.data.length == 0){
            const json:TeamInsertProperty = {departmentId, id, name: "测试班组"}
            const res = await dc.team.insert(json)
            expect(res.code).toBe(0)
            expect(res.msg).toBe('success')
            expect(res.data.length).toBe(1)
            expect(res.data[0].id).toBe(1)
            expect(res.data[0].name).toBe(json.name)
            expect(res.data[0].departmentId).toBe(json.departmentId)
        }
    },2000)

    test('team表增加name=测试班组0',async () => {
        const res = await dc.team.insert({departmentId: 1, id: 2, name:'测试班组0'})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(2)
        expect(res.data[0].name).toBe('测试班组0')
    },2000)

    test('team表修改name=测试班组1',async () => {
        const res = await dc.team.update({id: 2, name:'测试班组1'})
        console.log("---------")
        console.log(123, res.data[0].id)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(2)
        expect(res.data[0].name).toBe('测试班组1')
    },2000)

    test('team表中包含department=1的数据',async () => {
        const res = await dc.team.select({departmentId})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(1)
    },2000)

    test('级联选择器数据',async () => {
        interface ElCascaderOption {
            value: string
            label: string
            children?: ElCascaderOption[]
        }

        const groupId = 1
        // 获取集团信息
        const res = await dc.group.select({id:groupId})
        const arr:ElCascaderOption[] = []
        res.data.forEach((group:Group)=>{
            const children: ElCascaderOption[] = []
            group.companies?.forEach((company:Company)=>{
                const children2: ElCascaderOption[] = []
                company.departments?.forEach((department:Department)=>{
                    const children3: ElCascaderOption[] = []
                    department.teams.forEach((team:Team)=>{
                        children3.push({
                            value:team.id.toString(),
                            label:team.name
                        })
                    })
                    children2.push({
                        value:department.id.toString(),
                        label:department.name,
                        children:children3
                    })
                })
                children.push({
                    value:company.id.toString(),
                    label:company.name,
                    children:children2
                })
            })
            arr.push({
                value:group.id.toString(),
                label:group.name,
                children
            })
        })
        console.log(arr)
        // console.log(res.data)
        // expect(res.code).toBe(0)
        // expect(res.msg).toBe('success')
        // expect(res.data.length).toBe(1)
        // expect(res.data[0].id).toBe(2)
    },2000)
})
