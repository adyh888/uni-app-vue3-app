import {Mc, Dc} from '../../src/main'
import {AuthData} from "../../src/ms/mc";
import {
    LocationInsertProperty,
    LocationUpdateProperty,
} from "../../src/ms/dc";
import axios from "axios";

// const baseURL = 'https://api.mew-iot.cn'
const baseURL = 'http://www.mew-iot.cn:51000'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let dc

describe('dc', () => {
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        dc = Dc(service)
    })

    const id=1, deviceId='022111001'

    test('location表删除id=1',async () => {
        const res = await dc.location.delete({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    })

    test('location表确保包含toolId=1,priority=1的数据',async () => {
        const res = await dc.location.select({toolId: 1})
        if (res.data.length == 0){
            const json:LocationInsertProperty = {id, toolId: 1, priority: 1, index: 1, name: 'A01', deviceId, type: 'large'}
            const res = await dc.location.insert(json)
            expect(res.code).toBe(0)
            expect(res.msg).toBe('success')
            expect(res.data.length).toBe(1)
            expect(res.data[0].id).toBe(1)
            expect(res.data[0].toolId).toBe(json.toolId)
            expect(res.data[0].priority).toBe(json.priority)
            expect(res.data[0].deviceId).toBe(json.deviceId)
            expect(res.data[0].type).toBe(json.type)
            expect(res.data[0].index).toBe(json.index)
            expect(res.data[0].name).toBe(json.name)

        }
    },2000)

    test('location表增加type相同，priority不同',async () => {
        const json:LocationInsertProperty = {id: 2, toolId: 2, priority: 2, index: 2, name: 'A02', deviceId, type: 'large'}
        const res = await dc.location.insert(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json.id)
    },2000)

    const json:LocationUpdateProperty = {id: 2, toolId: 2, priority: 3, index: 2, name: 'A02', deviceId, type: 'large'}
    test('location表修改id=2的优先级',async () => {
        const res = await dc.location.update(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json.id)
        expect(res.data[0].toolId).toBe(json.toolId)
        expect(res.data[0].priority).toBe(json.priority)
        expect(res.data[0].deviceId).toBe(json.deviceId)
        expect(res.data[0].type).toBe(json.type)
        expect(res.data[0].index).toBe(json.index)
        expect(res.data[0].name).toBe(json.name)
    },2000)

    test('location表查询',async () => {
        const res = await dc.location.select({id: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(2)
        expect(res.data[0].priority).toBe(json.priority)
        expect(res.data[0].id).toBe(2)
        expect(res.data[0].toolId).toBe(json.toolId)
        expect(res.data[0].priority).toBe(json.priority)
        expect(res.data[0].deviceId).toBe(json.deviceId)
        expect(res.data[0].type).toBe(json.type)
        expect(res.data[0].index).toBe(json.index)
        expect(res.data[0].name).toBe(json.name)
    },2000)

    test('location表按type查询',async () => {
        const res = await dc.location.select({type: 'large'})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(1)
    },2000)

    // test('dc/location/get_empty_cabinet获取一个空柜',async () => {
    //     const {dc} = getInstance(BaseURL, AxiosEnv.default, authData.access_token)
    //     const res =await dc.location.get_empty_cabinet({type: 'large'})
    //     expect(res.code).toBe(0)
    //     expect(res.msg).toBe('success')
    //     expect(res.data.length).toBe(1)
    // })

    test('location表删除id=2',async () => {
        const res = await dc.location.delete({id: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    },2000)
})
