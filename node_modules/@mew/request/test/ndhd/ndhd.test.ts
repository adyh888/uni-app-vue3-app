import {Dc, Mc, Uc} from '../../src/main'

import axios from "axios";
const service = axios.create({
    baseURL: 'https://api.mew-iot.cn',
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
const uc = Uc(service)
const mc = Mc(service)
const dc = Dc(service)




/**
 * update: 2022-02-25
 * author: liliang
 * 环境: 测试环境
 *
 * 2022-02-25 liliang 增加对user表的验证
 * 2022-02-25 增加宁德的role
 */
const deviceId = '052111001'

let groupId = 1980
const groupName = '中广核集团'
const groupSortName = 'cgn'

const companyName = '宁德核电'
const companySortName = 'ndhd'
let companyId = 10816

const departmentName = companySortName + '默认部门'
const departmentSortName = 'department-' + companySortName
let departmentId = 701

const teamName = companySortName + '默认班组'
const teamSortName = 'team-' + companySortName
let teamId = 11804044

let adminRoleId = 31
let mcAdminRoleId = 11

describe.skip('accessToken', () => {
    test(`获取钉钉小程序demo的accessToken`, async () => {
        const res = await mc.getAccessToken('5000000001708659')
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.expireAt).toBeGreaterThan(1646199617510)
        expect(res.data.expireIn).toBe(7200)
        expect(res.data.accessToken).not.toBe('')
    }, 2000)
    test.skip(`获取钉钉小程序宁德核电配发柜的accessToken`, async () => {
        const res = await mc.getAccessToken('5000000002334316')
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.expireAt).toBeGreaterThan(1646199617511)
        expect(res.data.expireIn).toBe(7200)
        expect(res.data.accessToken).not.toBe('')
    }, 2000)
})

describe.skip('dingtalk', () => {
    beforeAll(async () => {
        // const res = await mc.getDingTalkUserInfo('','')
        // console.log(res)
        // if (res.data.findIndex(item => item.name == groupName) == -1) {
        //     await dc.group.insert({name: groupName, province: '福建', city: '宁德'})
        // }
    })
    test.skip(`getDingTalkUserInfo error`, async () => {
        const res = await mc.getDingTalkUserInfo({
            accessToken:'string',
            code:'string'
        })
        console.log(res)
        expect(res.errcode).toBe(88)
    }, 2000)
    test(`getDingTalkUserInfo ok`, async () => {
        const res = await mc.getDingTalkUserInfo({
            accessToken:'50292a9bad5a391aa9b636bd91cd74b7',
            code:'45814f6605723494973cd9244f24c4c1'
        })
        console.log(res)
        expect(res.errcode).toBe(0)
    }, 2000)
})

describe.skip('group', () => {
    beforeAll(async () => {
        const res = await dc.group.select({name: groupName})
        // console.log(res.data)
        if (res.data.findIndex(item => item.name == groupName) == -1) {
            await dc.group.insert({name: groupName, province: '福建', city: '宁德'})
        }
    })
    test(`确保group表包含name=${groupName}`, async () => {
        const res = await dc.group.select({name: groupName})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        groupId = res.data[0].id
        console.log('groupId', groupId)
        expect(res.data[0].name).toBe(groupName)
    }, 2000)
})
describe.skip('company', () => {
    beforeAll(async () => {
        const res = await dc.company.select({name: companySortName})
        // console.log(res.data)
        if (res.data.findIndex(item => item.name == companySortName) == -1) {
            await dc.group.insert({name: companySortName, province: '福建', city: '宁德'})
        }
    })
    test(`确保company表包含name=${companySortName}`, async () => {
        const res = await dc.company.select({name: companySortName})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        companyId = res.data[0].id
        console.log('companyId', companyId)
        expect(res.data[0].name).toBe(companySortName)
    }, 2000)
})
describe.skip('department', () => {
    beforeAll(async () => {
        const res = await dc.department.select({name: departmentName})
        // console.log(res.data)
        if (res.data.findIndex(item => item.name == departmentName) == -1) {
            const res = await dc.department.insert({name: departmentName, companyId})
            console.log(res)
        }
    })
    test(`确保 department 表包含name=${departmentName}`, async () => {
        const res = await dc.department.select({name: departmentName})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        departmentId = res.data[0].id
        console.log('departmentId', departmentId)
        expect(res.data[0].name).toBe(departmentName)
    }, 2000)
})
describe.skip('team', () => {
    beforeAll(async () => {
        const res = await dc.team.select({name: teamName})
        // console.log(res.data)
        if (res.data.findIndex(item => item.name == teamName) == -1) {
            const res = await dc.team.insert({name: teamName, departmentId})
            console.log(res)
        }
    })
    test(`确保 team 表包含name=${teamName}`, async () => {
        const res = await dc.team.select({name: teamName})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        teamId = res.data[0].id
        console.log('teamId', teamId)
        expect(res.data[0].name).toBe(teamName)
    }, 2000)
})

describe.skip('mc.role', () => {
    const mc_role_admin_name = companySortName + '_admin'
    const mc_role_user_name = companySortName + '_user'
    const mc_role_unauthorized_name = companySortName + '_unauthorized'
    beforeAll(async () => {
        const res = await mc.role.select({companyId})
        console.log(133, res.data)
        if (res.data.findIndex(item => item.name == mc_role_admin_name) == -1) {
            await mc.role.insert({grade: 0, companyId, name: mc_role_admin_name, description: '宁德核电管理员', status: true})
        }
        if (res.data.findIndex(item => item.name == mc_role_user_name) == -1) {
            await mc.role.insert({grade: 0, companyId, name: mc_role_user_name, description: '宁德核电用户', status: true})
        }
        if (res.data.findIndex(item => item.name == mc_role_unauthorized_name) == -1) {
            await mc.role.insert({
                grade: 0,
                companyId,
                name: mc_role_unauthorized_name,
                description: '宁德核电未授权',
                status: true
            })
        }
    })

    test(`确保包含role.name==${mc_role_admin_name}`, async () => {
        let res = await mc.role.select({companyId, name: mc_role_admin_name})
        console.log(146, res.data)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        mcAdminRoleId = res.data[0].id
        console.log('mcAdminRoleId', mcAdminRoleId)
        expect(res.data[0].name).toBe(mc_role_admin_name)
    }, 2000)

    test(`确保包含role.name==${mc_role_user_name}`, async () => {
        let res = await mc.role.select({companyId, name: mc_role_user_name})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].name).toBe(mc_role_user_name)
    }, 2000)

    test(`确保包含role.name==${mc_role_unauthorized_name}`, async () => {
        let res = await mc.role.select({companyId, name: mc_role_unauthorized_name})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].name).toBe(mc_role_unauthorized_name)
    }, 2000)
})
describe.skip('mc.manager', () => {
    const username = `${companySortName}_admin`
    beforeAll(async () => {
        const res = await mc.manager.select({companyId})
        // console.log(res.data)
        if (res.data.findIndex(item => item.username == username) == -1) {
            await mc.manager.insert({
                isSuper: false,
                password: "111111",
                companyId, departmentId, teamId, username, roleId: mcAdminRoleId, status: true
            })
        }
    })
    test(`确保manager表有用户名为admin`, async () => {
        const res = await mc.manager.select({username: 'admin'})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].username).toBe('admin')
    }, 2000)
    test(`确保manager表有用户名为${username}`, async () => {
        const res = await mc.manager.select({username})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].username).toBe(username)
    }, 2000)
})
describe.skip('role', () => {
    beforeAll(async () => {
        const res = await uc.role.select({companyId})
        // console.log(res.data)
        if (res.data.findIndex(item => item.name == 'admin') == -1) {
            await uc.role.insert({companyId, name: 'admin', description: '宁德核电管理员', status: true})
        }
        if (res.data.findIndex(item => item.name == 'user') == -1) {
            await uc.role.insert({companyId, name: 'user', description: '宁德核电用户', status: true})
        }
        if (res.data.findIndex(item => item.name == 'unauthorized') == -1) {
            await uc.role.insert({companyId, name: 'unauthorized', description: '宁德核电未授权', status: true})
        }
    })
    test('确保包含role.name==admin', async () => {
        let res = await uc.role.select({companyId, name: 'admin'})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        adminRoleId = res.data[0].id
        console.log('adminRoleId', adminRoleId)
        expect(res.data[0].name).toBe('admin')
    }, 2000)

    test('确保包含role.name==user', async () => {
        let res = await uc.role.select({companyId, name: 'user'})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].name).toBe('user')
    }, 2000)

    test('确保包含role.name==unauthorized', async () => {
        let res = await uc.role.select({companyId, name: 'unauthorized'})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].name).toBe('unauthorized')
    }, 2000)
})
describe.skip('user', () => {
    const username = `${companySortName}_admin`
    beforeAll(async () => {
        const res = await uc.user.select({companyId})
        // console.log(res.data)
        if (res.data.findIndex(item => item.username == username) == -1) {
            await uc.user.insert({
                groupId,
                companyId,
                departmentId,
                teamId,
                username,
                roleId: adminRoleId,
                status: true
            })
        }
    })
    test(`确保user表有用户名为admin`, async () => {
        const res = await uc.user.select({username: 'admin'})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].username).toBe('admin')
    }, 2000)
    test(`确保user表有用户名为${username}`, async () => {
        const res = await uc.user.select({username})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].username).toBe(username)
    }, 2000)

    const testUser = '李亮'
    const roleId =2 //2:普通用户 1:管理员
    let uid=0
    test(`将用户名为${testUser}`, async () => {
        const res = await uc.user.select({username:testUser})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].username).toBe(testUser)
        uid=res.data[0].id
    }, 2000)
    test(`将用户名${testUser}改为角色为${roleId}`, async () => {
        const res = await uc.user.update({id:uid,roleId:roleId})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].roleId).toBe(roleId)
    }, 2000)
})
describe.skip('location—', () => {
    const locationArr = [
        {location: 'A01-01', type: 'small', priority: 5},
        {location: 'A01-02', type: 'small', priority: 4},
        {location: 'A01-03', type: 'small', priority: 3},
        {location: 'A01-04', type: 'small', priority: 2},
        {location: 'A01-05', type: 'small', priority: 1},
        {location: 'A01-06', type: 'large', priority: 1},
        {location: 'A01-07', type: 'large', priority: 2},
        {location: 'A02-01', type: 'small', priority: 5},
        {location: 'A02-02', type: 'small', priority: 4},
        {location: 'A02-03', type: 'small', priority: 3},
        {location: 'A02-04', type: 'small', priority: 2},
        {location: 'A02-05', type: 'small', priority: 1},
        {location: 'A02-06', type: 'large', priority: 1},
        {location: 'A02-07', type: 'large', priority: 2},
    ]
    beforeAll(async () => {
        const res = await dc.location.select({deviceId})
        // console.log(res.data)
        // 当表内deviceId对应的location数据为空时,插入数据
        if (res.data.length == 0) {
            for (const item of locationArr) {
                const data = {
                    deviceId,
                    name: item.location,
                    type: item.type,
                    priority: item.priority,
                    // toolId: number
                    status: 1
                }
                //暂不验证是否正确执行
                await dc.location.insert(data)
            }
        }
    })
    test(`确保location表有配置清单中的数据`, async () => {
        const res = await dc.location.select({deviceId})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(locationArr.length)
    }, 2000)

    test('获取大号柜子type=large,优先级=1的信息', async () => {
        const res = await dc.location.select({deviceId, type: 'large', priority: 1})
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        console.log(res.data)
        for (const item of res.data) {
            expect(item.priority).toBe(1)
            expect(item.type).toBe('large')
        }
    })
})

// describe('tool',()=>{
//     beforeAll(async()=>{
//         // const res= await dc.group.select({name:groupName})
//
//         // console.log(res.data)
//
//     })
//     // test(`确保tool表包含id=1的数据`, async() => {
//     //     const res= await tc.tool.select({deviceId,id:8})
//     //     console.log(res)
//     //     expect(res.code).toBe(0)
//     //     expect(res.msg).toBe('success')
//     //
//     //     expect(res.data.length).toBe(1)
//     //     expect(res.data[0].location).toBe(2)
//     //     // const toolId=res.data[0].id
//     //     // console.log('toolId',toolId)
//     //     // expect(toolId).toBe(1)
//     // },2000)
// })
