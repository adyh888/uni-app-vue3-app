import {AuthData, Mc} from "../../src/ms/mc";
import axios from "axios";
import {Ac, AlarmDeleteProperty, AlarmInsertProperty, AlarmSelectProperty, AlarmUpdateProperty} from "../../src/ms/ac";

const baseURL = 'https://api.mew-iot.cn'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let ac

describe('ac.alarm',()=>{
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        ac = Ac(service)
    })

    const id = 1

    test('alarm 表删除', async () => {
        const res = await ac.alarm.delete({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    }, 2000)

    test('alarm表增加', async () => {
        const json: AlarmInsertProperty = {
            alarmLength: 10,
            alarmTime: 1623998486399,
            describe: "测试报警描述",
            enabled: true,
            grade: "1",
            name: "测试报警简称",
            timespan: 10,
            type: "测试报警类型",
            id
        }
        const res = await ac.alarm.insert(json)
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].alarmLength).toBe(json.alarmLength)
        expect(res.data[0].alarmTime).toBe(json.alarmTime)
        expect(res.data[0].describe).toBe(json.describe)
        expect(res.data[0].enabled).toBe(json.enabled)
        expect(res.data[0].grade).toBe(json.grade)
        expect(res.data[0].name).toBe(json.name)
        expect(res.data[0].timespan).toBe(json.timespan)
        expect(res.data[0].type).toBe(json.type)
    }, 2000)

    const json2: AlarmUpdateProperty = {
        id,
        alarmLength: 11,
        alarmTime: 1623998486399,
        describe: "测试报警描述1",
        enabled: false,
        grade: "2",
        name: "测试报警简称1",
        timespan: 11,
        type: "测试报警类型1"
    }
    test('alarm表修改', async () => {
        const res = await ac.alarm.update(json2)
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].alarmLength).toBe(json2.alarmLength)
        expect(res.data[0].alarmTime).toBe(json2.alarmTime)
        expect(res.data[0].describe).toBe(json2.describe)
        expect(res.data[0].enabled).toBe(json2.enabled)
        expect(res.data[0].grade).toBe(json2.grade)
        expect(res.data[0].name).toBe(json2.name)
        expect(res.data[0].timespan).toBe(json2.timespan)
        expect(res.data[0].type).toBe(json2.type)
    }, 2000)

    test('alarm表查询', async () => {
        const res = await ac.alarm.select({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        // const alarm = res.data[0]
        // alarm.items
        expect(res.data[0].alarmTime).toBe(1623998486399)
        expect(res.data[0].describe).toBe(json2.describe)
        expect(res.data[0].enabled).toBe(json2.enabled)
        expect(res.data[0].grade).toBe(json2.grade)
        expect(res.data[0].name).toBe(json2.name)
        expect(res.data[0].timespan).toBe(json2.timespan)
        expect(res.data[0].type).toBe(json2.type)
    }, 2000)

    test('alarm表增加相同的type', async () => {
        const json: AlarmInsertProperty = {
            alarmLength: 10,
            alarmTime: 1623998486399,
            describe: "测试报警描述2",
            enabled: true,
            grade: "1",
            name: "测试报警简称2",
            timespan: 10,
            type: "测试报警类型1",
            id: 2
        }
        const res = await ac.alarm.insert(json)
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
    },2000)

    test('alarm表查询相同的type', async () => {
        const json:AlarmSelectProperty = {type: "测试报警类型1"}
        const res = await ac.alarm.select(json)
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(2)
        expect(res.data[0].type).toBe(json2.type)
    }, 2000)

    test('alarm表删除2', async () => {
        const json:AlarmDeleteProperty = {id: 2}
        const res = await ac.alarm.delete(json)
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].alarmTime).toBe(json2.alarmTime)
        expect(res.data[0].describe).toBe(json2.describe)
        expect(res.data[0].enabled).toBe(json2.enabled)
        expect(res.data[0].grade).toBe(json2.grade)
        expect(res.data[0].name).toBe(json2.name)
        expect(res.data[0].timespan).toBe(json2.timespan)
        expect(res.data[0].type).toBe(json2.type)
    }, 2000)

})
