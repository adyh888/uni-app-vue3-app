import {Mc, Uc} from '../../src/main'
import {AuthData} from "../../src/ms/mc";
import {CardInsertProperty} from "../../src/ms/uc";
import axios from "axios";

const baseURL = 'http://www.mew-iot.cn:51000'
// const baseURL = 'https://api.mew-iot.cn'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let uc

describe('uc', () => {
    beforeAll(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        uc = Uc(service)
    })
    const id=1, cardNo= '2882711915'

    test('card表删除id=2',async () => {
        const res = await uc.card.delete({id: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    })

    test(`确保card表包含cardNo=2882711915,id=1`, async() => {
        const res= await uc.card.select({id, cardNo})
        if (res.data.length == 0){
            const json:CardInsertProperty = {id, cardNo: '2882711915', status: true}
            const res = await uc.card.insert(json)
            expect(res.code).toBe(0)
            expect(res.msg).toBe('success')
            expect(res.data.length).toBe(1)
            expect(res.data[0].id).toBe(json.id)
            expect(res.data[0].status).toBe(json.status)
            expect(res.data[0].cardNo).toBe(json.cardNo)
        }
    },2000)

    test('card表增加id=2',async () => {
        const json = {id: 2, cardNo: '2882711914', status: true}
        const res = await uc.card.insert(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json.id)
        expect(res.data[0].status).toBe(json.status)
        expect(res.data[0].cardNo).toBe(json.cardNo)
    })

    test('card表修改id=2的卡号',async () => {
        const res = await uc.card.update({id: 2, cardNo: '2882711913'})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].cardNo).toBe('2882711913')
    })

    test('card表查询',async () => {
        const res =await uc.card.find({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
    })
})
