import { Mc, Tc} from '../../src/main'
import {AuthData} from "../../src/ms/mc";
import {VillageInsertProperty, VillageUpdateProperty} from "../../src/ms/uc";
import axios from "axios";

// const baseURL = 'http://www.mew-iot.cn:51000'
const baseURL = 'https://api.mew-iot.cn'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let uc

describe('uc', () => {
    beforeAll(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        uc = Tc(service)
    })
    const id=1

    test(`确保village表包含有效数据`,async () => {

        async function insertData(json: VillageInsertProperty) {
            const res = await uc.village.insert(json)
            expect(res.code).toBe(0)
            expect(res.msg).toBe('success')
            expect(res.data.length).toBe(1)
            let village = res.data[0]
            expect(village.id).toBe(json.id)
            expect(village.villageName).toBe(json.villageName)
            expect(village.building).toBe(json.building)
            expect(village.unit).toBe(json.unit)
            expect(village.room).toBe(json.room)
        }

        const res = await uc.village.select({curPageNo: 1, pageSize: 1})
        if (res.data.length == 0) {
            await insertData({id, villageName: "测试小区", building:'1幢', unit:'1单元', room: '1室'})
            await insertData({id: 2, villageName: "测试小区", building:'1幢', unit:'1单元', room: '2室'}) //不同住户
            await insertData({id: 3, villageName: "测试小区", building:'1幢', unit:'2单元', room: '1室'})  //不同单元
            await insertData({id: 5, villageName: "测试小区", building:'2幢', unit:'1单元', room: '1室'})  //不同幢
            await insertData({id: 6, villageName: "测试小区0", building:'1幢', unit:'1单元', room: '1室'}) //不同小区
            await insertData({id: 7, villageName: "测试小区0", building:'1幢', unit:'1单元', room: '1室'}) //相同数据
        }

    }, 2000)

    test('village表修改小区名，幢，单元，室',async () => {

        const json:VillageUpdateProperty = {id: 7, villageName: "测试小区1", building:'2幢', unit:'2单元', room: '2室'}
        const res = await uc.village.update(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].villageName).toBe("测试小区1")
    },2000)

    test('village表删除',async () => {

        const res = await uc.village.delete({id: 7})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    })
})
