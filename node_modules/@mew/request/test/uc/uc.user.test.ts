import { Mc, Tc} from '../../src/main'
import {AuthData} from "../../src/ms/mc";
import {UserInsertProperty, UserModifyProperty, UserRegisterProperty, UserUpdateProperty} from "../../src/ms/uc";
import axios from "axios";

// const baseURL = 'http://www.mew-iot.cn:51000'
const baseURL = 'https://api.mew-iot.cn'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let uc
describe('uc', () => {
    beforeAll(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        uc = Tc(service)
    })
    const id=1

    test(`确保user表包含username=admin`, async() => {

        const res= await uc.user.select({username:'admin'})
        // console.log(res.data)

        // user表增加admin用户
        if (res.data.length == 0){
            const json:UserInsertProperty = {
                cardId: 2,
                fingerId: 1,
                faceId: 1,
                id,
                status: true,
                username: "admin",
                firstName: "csx",
                companyId: 1, departmentId: 1, groupId: 1, roleId: 1, teamId: 1}
            const res = await uc.user.insert(json)
            expect(res.code).toBe(0)
            expect(res.msg).toBe('success')
            expect(res.data.length).toBe(1)
            expect(res.data[0].id).toBe(1)
            expect(res.data[0].status).toBe(json.status)
            expect(res.data[0].username).toBe(json.username)
            expect(res.data[0].companyId).toBe(json.companyId)
            expect(res.data[0].departmentId).toBe(json.departmentId)
            expect(res.data[0].groupId).toBe(json.groupId)
            expect(res.data[0].roleId).toBe(json.roleId)
            expect(res.data[0].teamId).toBe(json.teamId)
        }
    },2000)

    test('user表增加相同用户名、不同姓名的用户',async () => {

        const json:UserInsertProperty = {
            // cardId: 1,
            fingerId: 1,
            faceId: 1,
            id: 2,
            status: true,
            username: "admin",
            firstName: "csx1",
            companyId: 1, departmentId: 1, groupId: 1, roleId: 2, teamId: 1}
        const res = await uc.user.insert(json)
        expect(res.code).toBe(1)
        expect(res.msg).toBe('fail')
    })

    test('user表增加不同用户名、相同姓名的用户',async () => {

        const json:UserInsertProperty = {
            // cardId: 1,
            fingerId: 1,
            faceId: 1,
            id: 2,
            status: true,
            username: "admin1",
            firstName: "csx",
            companyId: 1, departmentId: 1, groupId: 1, roleId: 2, teamId: 1}
        const res = await uc.user.insert(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(2)
    })

    test('user表修改用户权限',async () => {

        const json:UserUpdateProperty = {id: 2, roleId:1}
        const res = await uc.user.update(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(2)
        expect(res.data[0].roleId).toBe(json.roleId)
    },2000)

    test('user表删除id=2的用户',async () => {

        const res = await uc.role.delete({id: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
    },2000)

    // test('user表注册用户并添加设备用户',async () => {
    //
    //     const json:UserRegisterProperty = {id, departmentId: 1, groupId: 1, teamId: 1, companyId: 1, username: 'csx', phoneNo: '15895035525',
    //         password: '123456', cardId: 1, fingerId: 1, faceId: 1, deviceIdArr: ['022111001','022111002'], roleIdArr: [1, 2]}
    //     const res = await uc.user.register(json)
    //     expect(res.code).toBe(0)
    //     expect(res.msg).toBe('success')
    //     expect(res.data.length).toBe(1)
    //     expect(res.data[0].id).toBe(json.id)
    //     expect(res.data[0].departmentId).toBe(json.departmentId)
    //     expect(res.data[0].groupId).toBe(json.groupId)
    //     expect(res.data[0].teamId).toBe(json.teamId)
    //     expect(res.data[0].companyId).toBe(json.companyId)
    //     expect(res.data[0].username).toBe(json.username)
    //     expect(res.data[0].cardId).toBe(json.cardId)
    //     expect(res.data[0].fingerId).toBe(json.fingerId)
    //     expect(res.data[0].fingerId).toBe(json.fingerId)
    //     expect(res.data[0].faceId).toBe(json.faceId)
    //     expect(res.data[0].deviceIdArr).toBe(json.deviceIdArr)
    //     expect(res.data[0].roleIdArr).toBe(json.roleIdArr)
    // })
    //
    // test('user表修改用户并修改设备用户的权限',async () => {
    //
    //     const json:UserModifyProperty = {deviceIdArr: ['022111001','022111002'], roleIdArr: [1, 1], uid: 1}
    //     const res = await uc.user.modify(json)
    //     expect(res.code).toBe(0)
    //     expect(res.msg).toBe('success')
    //     expect(res.data.length).toBe(1)
    //     expect(res.data[0].deviceIdArr).toBe(json.deviceIdArr)
    //     expect(res.data[0].roleIdArr).toBe(json.roleIdArr)
    //     expect(res.data[0].uid).toBe(json.uid)
    // })
})
