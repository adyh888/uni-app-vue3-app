import { Mc, Tc} from '../../src/main'
import {AuthData} from "../../src/ms/mc";
import {UserTeamInsertProperty} from "../../src/ms/uc";
import axios from "axios";

// const baseURL = 'http://www.mew-iot.cn:51000'
const baseURL = 'https://api.mew-iot.cn'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let uc

describe('uc', () => {
    beforeAll(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        uc = Tc(service)
    })

    const id=1

    test('user_team表删除uid=1',async () => {

        const res = await uc.user_team.delete({uid: 1})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    },2000)

    test('user_team表删除uid=2',async () => {

        const res = await uc.user_team.delete({uid: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    },2000)

    test('user_team表创建集团角色',async () => {

        async function insertData(json:UserTeamInsertProperty) {
            const res = await uc.user_team.insert(json)
            expect(res.code).toBe(0)
            expect(res.msg).toBe('success')
            expect(res.data.length).toBe(1)
            let user_group = res.data[0]
            expect(user_group.id).toBe(json.id)
            expect(user_group.enabled).toBe(json.enabled)
            expect(user_group.teamId).toBe(json.teamId)
            expect(user_group.uid).toBe(json.uid)
        }
        const res =await uc.user_team.select({teamId: 1, pageSize: 1, curPageNo: 1})
        if (res.data.length == 0){
            await insertData({enabled: true, teamId: 1, uid: 1, id})     //启用
            await insertData({enabled: false, teamId: 1, uid: 2, id: 2}) //不启用
            await insertData({enabled: true, teamId: 2, uid: 1, id: 3})  //同一个用户绑不同班组
            await insertData({enabled: true, teamId: 3, uid: 2, id: 4})  //绑不存在的班组
        }
    },2000)

    test('修改id=2的部门',async () => {

        const res = await uc.user_team.update({id: 2, teamId: 2})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(2)
        expect(res.data[0].teamId).toBe(2)
    })
})
