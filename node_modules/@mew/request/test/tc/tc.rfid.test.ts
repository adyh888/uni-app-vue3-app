import {AuthData, Mc} from "../../src/ms/mc";
import axios from "axios";
import {Tc} from "../../src/main";
import {RfidDeleteProperty} from "../../src/ms/tc";

// const baseURL = 'https://api.mew-iot.cn'
const baseURL = 'http://www.mew-iot.cn:51000'


let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let tc

describe('tc.rfid', () => {
    const id =1
    const deviceId = '022111001'

    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        tc = Tc(service)
    })

    test('rfid表删除', async () => {
        const json:RfidDeleteProperty = {id:1, deviceId}
        const res = await tc.rfid.delete(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    }, 2000)


    test('rfid表增加', async () => {
        const json = {
            id:1,
            enabled: true,
            epc: '100010000000000000000027',
            tid: 'e2806894200050060a625c62',
            user: 'admin',
            status: 0,
            toolId: 1,
            deviceId
        }
        const res = await tc.rfid.insert(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json.id)
        expect(res.data[0].enabled).toBe(json.enabled)
        expect(res.data[0].epc).toBe(json.epc)
        expect(res.data[0].tid).toBe(json.tid)
        expect(res.data[0].user).toBe(json.user)
        expect(res.data[0].status).toBe(json.status)
        expect(res.data[0].toolId).toBe(json.toolId)
        expect(res.data[0].deviceId).toBe(json.deviceId)
    }, 2000)

    const json = {
        id,
        enabled: false,
        epc: '100010000000000000000026',
        tid: 'e2806894200050060a625c62',
        user: 'admin',
        status: 1,
        toolId: 2,
        deviceId
    }
    test('rfid表修改', async () => {
        const res = await tc.rfid.update(json)
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data[0].id).toBe(json.id)
        expect(res.data.length).toBe(1)
        expect(res.data[0].enabled).toBe(json.enabled)
        expect(res.data[0].epc).toBe(json.epc)
        expect(res.data[0].tid).toBe(json.tid)
        expect(res.data[0].user).toBe(json.user)
        expect(res.data[0].status).toBe(json.status)
        expect(res.data[0].toolId).toBe(json.toolId)
        expect(res.data[0].deviceId).toBe(json.deviceId)
    }, 2000)

    test('rfid表查询', async () => {
        const res = await tc.rfid.select({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].enabled).toBe(json.enabled)
        expect(res.data[0].epc).toBe(json.epc)
        expect(res.data[0].tid).toBe(json.tid)
        expect(res.data[0].user).toBe(json.user)
        expect(res.data[0].status).toBe(json.status)
        // expect(res.data[0].toolId).toBe(json.toolId)
        expect(res.data[0].deviceId).toBe(json.deviceId)
    }, 2000)
})
