import {AuthData, Mc} from "../../src/ms/mc";
import axios from "axios";
import {Tc} from "../../src/main";
import {
    RfidDeleteProperty,
    TransferInsertProperty, TransferItemInsertBatchProperty,
    TransferItemSelectProperty,
    TransferSelectProperty
} from "../../src/ms/tc";

// const baseURL = 'https://api.mew-iot.cn'
const baseURL = 'http://www.mew-iot.cn:51000'


let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let tc

describe('tc.transfer', () => {
    const id =1
    const deviceId = '022111001'

    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        tc = Tc(service)
    })

    test('transfer表删除', async () => {
        const res = await tc.transfer.delete({id})
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
    }, 2000)

    test('transfer表增加', async () => {
        const json: TransferInsertProperty = {
            id,
            companyId: 1,
            deviceIdIn: "022111001",
            deviceIdOut: "022111002",
            groupId: 1,
            status: 1,
            transferNo: "1",
            deadline: 1648137953907
        }
        const res = await tc.transfer.insert(json)
        expect(res.code).toBe(0)
        console.log(res.data)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe( json.id)
        expect(res.data[0].companyId).toBe(json.companyId)
        expect(res.data[0].deviceIdIn).toBe(json.deviceIdIn)
        expect(res.data[0].deviceIdOut).toBe(json.deviceIdOut)
        expect(res.data[0].groupId).toBe(json.groupId)
        expect(res.data[0].status).toBe(json.status)
        expect(res.data[0].transferNo).toBe(json.transferNo)
    },2000)

    const json1 = {id, status: 0}
    test('transfer表修改状态', async () => {
        const res = await tc.transfer.update(json1)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json1.id)
        expect(res.data[0].status).toBe(json1.status)
    },2000)

    test('transfer表查询',async () => {
        const res = await tc.transfer.select({id})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
        expect(res.data[0].status).toBe(json1.status)
    })

    test('transfer表按状态查询',async () => {
        const json:TransferSelectProperty = {status: 0, curPageNo: 1, pageSize: 1}
        const res = await tc.transfer.select(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].status).toBe(json.status)
    },2000)

    test('transfer表按调拨单号查询',async () => {
        const json:TransferSelectProperty = {transferNo: '1', curPageNo: 1, pageSize: 1}
        const res = await tc.transfer.select(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].transferNo).toBe(json.transferNo)
    },2000)

})
