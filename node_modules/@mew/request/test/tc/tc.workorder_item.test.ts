import axios from "axios";
import {
    Tc,
    WorkOrderInsertProperty, WorkOrderItemInsertProperty,
    WorkOrderItemSelectProperty, WorkOrderItemUpdateProperty,
    WorkOrderSelectProperty,
    WorkOrderUpdateProperty
} from "../../src/ms/tc";
import {AuthData, Mc} from "../../src/ms/mc";
import {AxiosEnv} from "../../src/main";
import {deviceId} from "../../../../booher.ndhd.xcx.uniapp/config/config";

const baseURL = 'https://api.mew-iot.cn'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let tc

describe('workorder_item',()=>{
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        tc = Tc(service)
    })


    test('workorder_item表删除',async () => {
        const res = await tc.workorder_item.delete({id:1})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(0)
        // expect(res.data[0].id).toBe(1)
    },2000)

    test('workorder_item表增加',async () => {
        const json:WorkOrderItemInsertProperty = {status: false,id:1, isPutIn: false, quantity: 1, toolId: 1, workorderNo: "1"}
        const res = await tc.workorder_item.insert(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json.id)
        expect(res.data[0].isPutIn).toBe(json.isPutIn)
        expect(res.data[0].quantity).toBe(json.quantity)
        expect(res.data[0].toolId).toBe(json.toolId)
    },2000)

    test('workorder_item表修改',async () => {
        const json:WorkOrderItemUpdateProperty = {id:1, isPutIn:true}
        const res = await tc.workorder_item.update(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(json.id)
        expect(res.data[0].isPutIn).toBe(json.isPutIn)
    },2000)

    test('workorder_item表查询',async () => {
        const res = await tc.workorder_item.select({id:1})
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].id).toBe(1)
    },2000)

    test('workorder_item表按是否归还查询',async () => {
        const json:WorkOrderItemSelectProperty = {isPutIn: true, curPageNo: 1, pageSize:1}
        const res = await tc.workorder_item.select(json)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBe(1)
        expect(res.data[0].isPutIn).toBe(json.isPutIn)
    },2000)

    // test('workorder_item表批量增加',async () => {
    //     const json:WorkOrderItemInsertBatchProperty= {isPutIn: false, quantity: 1, toolId: 1, workorderNo: "1"}
    //     const res = await tc.workorder_item.insert.batch(json)
    //     expect(res.code).toBe(0)
    //     expect(res.msg).toBe('success')
    //     expect(res.data.length).toBe(1)
    //     expect(res.data[0].id).toBe(1)
    //     expect(res.data[0].isPutIn).toBe(json.isPutIn)
    //     expect(res.data[0].quantity).toBe(json.quantity)
    //     expect(res.data[0].toolId).toBe(json.toolId)
    // },2000)

    // test('workorder_item表批量修改',async () => {
    //     const json:WorkorderItemUpdateBatchProperty= {itemArr: [
    //             {
    //                 id: 1,
    //                 inspectStatus: 1,
    //                 exchangeStatus: 1
    //             }
    //         ]}
    //     const res = await tc.workorder_item.update.batch(json)
    //     expect(res.code).toBe(0)
    //     expect(res.msg).toBe('success')
    //     expect(res.data.length).toBe(1)
    //     expect(res.data[0].id).toBe(1)
    //     expect(res.data[0].itemArr.isPutIn).toBe(json.itemArr.isPutIn)
    //     expect(res.data[0].itemArr.quantity).toBe(json.itemArr.quantity)
    //     expect(res.data[0].itemArr.toolId).toBe(json.itemArr.toolId)
    // },2000)


})
