export declare const isDebugMode = true;
export declare let ac: {
    process: import("./request").Request<import("./ms/ac").Process, import("./ms/ac").ProcessInsertProperty, import("./ms/ac").ProcessDeleteProperty, import("./ms/ac").ProcessUpdateProperty, import("./ms/ac").ProcessSelectProperty>;
    process_type: import("./request").Request<import("./ms/ac").ProcessType, import("./ms/ac").ProcessTypeInsertProperty, import("./ms/ac").ProcessTypeDeleteProperty, import("./ms/ac").ProcessTypeUpdateProperty, import("./ms/ac").ProcessTypeSelectProperty>;
    file: import("./request").Request<import("./ms/ac").File, import("./ms/ac").FileInsertProperty, import("./ms/ac").FileDeleteProperty, import("./ms/ac").FileUpdateProperty, import("./ms/ac").FileSelectProperty>;
    setting: import("./request").Request<import("./ms/ac").Setting, import("./ms/ac").SettingInsertProperty, import("./ms/ac").SettingDeleteProperty, import("./ms/ac").SettingUpdateProperty, import("./ms/ac").SettingSelectProperty>;
    carousel: import("./request").Request<import("./ms/ac").Carousel, import("./ms/ac").CarouselInsertProperty, import("./ms/ac").CarouselDeleteProperty, import("./ms/ac").CarouselUpdateProperty, import("./ms/ac").CarouselSelectProperty>;
    task: import("./request").Request<import("./ms/ac").Task, import("./ms/ac").TaskInsertProperty, import("./ms/ac").TaskDeleteProperty, import("./ms/ac").TaskUpdateProperty, import("./ms/ac").TaskSelectProperty>;
    alarm: import("./request").Request<import("./ms/ac").Alarm, import("./ms/ac").AlarmInsertProperty, import("./ms/ac").AlarmDeleteProperty, import("./ms/ac").AlarmUpdateProperty, import("./ms/ac").AlarmSelectProperty>;
    feedback: import("./request").Request<import("./ms/ac").Feedback, import("./ms/ac").FeedbackInsertProperty, import("./ms/ac").FeedbackDeleteProperty, import("./ms/ac").FeedbackUpdateProperty, import("./ms/ac").FeedbackSelectProperty>;
    getVersion: () => Promise<{
        code: number;
        msg: string;
        data: string;
    }>;
    processNext: (json: import("./ms/ac").ProcessNextProperty) => Promise<any>;
    processStart: (json: import("./ms/ac").ProcessStartProperty) => Promise<any>;
    messageNotice: (json: import("./ms/ac").MessageNoticeProperty) => Promise<any>;
    getTaskNumber: (json: {
        uid: number;
    }) => Promise<{
        code: number;
        data: any;
    }>;
};
