import { AxiosInstance } from "axios";
export interface OpenDoorData {
    cabinet: string;
}
export interface PayLoadData {
    payload_bytes: number;
    redelivered: boolean;
    exchange: string;
    routing_key: string;
    message_count: number;
    properties: {
        delivery_mode: number;
        headers: {};
    };
    payload: string;
    payload_encoding: string;
}
export default class RabbitApi {
    exchangeName: string;
    queueName: string;
    _service: any;
    constructor(service: AxiosInstance);
    permissions(): Promise<any>;
    bind(exchangeName: any, queueName: any, routingKey: any): Promise<any>;
    newQueue(queueName: any): Promise<any>;
    deleteQueue(queueName: any): Promise<any>;
    newExchange(exchangeName: any): Promise<any>;
    deleteExchange(exchangeName: any): Promise<any>;
    consumers(): Promise<any>;
    overview(): Promise<any>;
    users(): Promise<any>;
    openDoor(payload: OpenDoorData): Promise<any>;
    fakeDoorStatusChange(): Promise<void>;
    pubToExchanges(data: any): Promise<any>;
    pubToQueue(data: any): Promise<any>;
    getLockStatus(location: string): Promise<boolean | undefined>;
    _getMessage(): Promise<PayLoadData[]>;
    private _post;
    private _put;
    private _delete;
    private _get;
}
