import { IRes, Request } from "../request";
export interface Role {
    grade?: number;
    groupId?: number;
    companyId?: number;
    teamId?: string;
    status?: boolean;
    description?: string;
    name?: string;
    id?: number;
}
export interface RoleSelectProperty extends Role {
    curPageNo?: number;
    pageSize?: number;
    startAt?: number;
    endAt?: number;
}
export interface RoleUpdateProperty extends Role {
    id: number;
}
export interface RoleInsertProperty extends Role {
    grade: number;
    status: boolean;
    description: string;
    name: string;
}
export interface RoleDeleteProperty extends Role {
    id: number;
}
export declare enum RoleName {
    unauthorized = "unauthorized",
    company = "company",
    company2 = "company2",
    admin = "admin",
    super = "super",
    gtadmin = "gtadmin",
    gtdepart = "gtdepart",
    gtdepart1 = "gtdepart1"
}
export interface AuthProperty {
    username: string;
    password: string;
}
export interface Manager {
    id: number;
    username: string;
    password: string;
    roleId: number;
    groupId: number;
    companyId: number;
    departmentId: number;
    teamId: string;
    unionid: string;
    status: boolean;
    isSuper: boolean;
    avatarUrl: string;
    createdAt: string;
    updatedAt: string;
}
export interface ManagerSelectProperty {
    id?: number;
    companyId?: number;
    groupId?: number;
    departmentId?: number;
    teamId?: string;
    roleIdTest?: string;
    username?: string;
    password?: string;
    roleId?: number;
    unionid?: string;
    status?: boolean;
    isSuper?: boolean;
    avatarUrl?: string;
    pageSize?: number;
    curPageNo?: number;
    startAt?: Date;
    endAt?: Date;
}
export interface ManagerUpdateProperty {
    id: number;
    username?: string;
    password?: string;
    roleId?: number;
    unionid?: string;
    status?: boolean;
    isSuper?: boolean;
    groupId?: number;
    companyId?: number;
    departmentId?: number;
    teamId?: string;
    avatarUrl?: string;
}
export interface ManagerInsertProperty {
    id?: number;
    username: string;
    password: string;
    roleId: number;
    unionid?: string;
    status: boolean;
    isSuper: boolean;
    groupId?: number;
    companyId: number;
    departmentId?: number;
    teamId?: string;
}
export interface ManagerDeleteProperty {
    id?: number;
    username?: string;
    password?: string;
    roleId?: number;
    unionid?: string;
    status?: boolean;
    isSuper?: boolean;
    groupId?: number;
    companyId?: number;
    departmentId?: number;
    teamId?: string;
    avatarUrl?: string;
}
export interface Access {
    id: number;
    moduleName: string;
    actionName: string;
    type: number;
    url: string;
    moduleId: number;
    sort: number;
    description: string;
    icon: string;
    status: boolean;
    createdAt: string;
    updatedAt: string;
    children: Access[];
}
export interface AccessSelectProperty {
    id?: number;
    moduleName?: string;
    actionName?: string;
    type?: number;
    url?: string;
    moduleId?: number;
    sort?: number;
    description?: string;
    icon?: string;
    status?: boolean;
    pageSize?: number;
    curPageNo?: number;
    startAt?: Date;
    endAt?: Date;
}
export interface AccessUpdateProperty {
    id: number;
    moduleName?: string;
    actionName?: string;
    type?: number;
    url?: string;
    moduleId?: number;
    sort?: number;
    description?: string;
    icon?: string;
    status?: boolean;
}
export interface AccessInsertProperty {
    id?: number;
    moduleName: string;
    actionName: string;
    type: number;
    url: string;
    moduleId: number;
    sort: number;
    description?: string;
    icon?: string;
    status: boolean;
}
export interface AccessDeleteProperty {
    id: number;
    moduleName?: string;
    actionName?: string;
    type?: number;
    url?: string;
    moduleId?: number;
    sort?: number;
    description?: string;
    icon?: string;
    status?: boolean;
}
export interface RoleAccess {
    id: number;
    roleId: number;
    accessId: number;
    enabled: boolean;
    createdAt: number;
    updatedAt: number;
}
export interface RoleAccessSelectProperty {
    id?: number;
    inOrder?: boolean;
    accessDetail?: boolean;
    roleId?: number;
    accessId?: number;
    enabled?: boolean;
    pageSize?: number;
    curPageNo?: number;
    startAt?: number;
    endAt?: number;
}
export interface RoleAccessUpdateProperty {
    id: number;
    roleId?: number;
    accessId?: number;
    enabled?: boolean;
}
export interface RoleAccessDeleteProperty {
    id?: number;
    roleId?: number;
    accessId?: number;
    enabled?: boolean;
}
export interface RoleAccessInsertProperty {
    id?: number;
    roleId: number;
    accessId: number;
    enabled?: boolean;
    accessIdArr?: [];
}
export interface RoleAccessUpdateBatchProperty {
    roleId: number;
    accessIdArr: number[];
}
export interface App {
    id: string;
    appKey: string;
    appName: string;
    appSecret: string;
    type: number;
    class: number;
    suiteTicket: string;
    suiteSecret: string;
    suiteId: string;
    suiteKey: string;
    agentId: string;
    authCorpId: string;
    status: boolean;
    createdAt: string;
    updatedAt: string;
}
export interface AppSelectProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
    curPageNo?: number;
    pageSize?: number;
    startAt?: number;
    endAt?: number;
}
export interface AppInsertProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}
export interface AppUpdateProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}
export interface AppDeleteProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}
export interface AuthData {
    access_token: string;
    expiration: number;
    overdueDateTs: number;
    overdueDate: string;
}
export interface AccessTokenData {
    expireIn: number;
    expireAt: number;
    accessToken: string;
}
export interface DingTalkUserInfoRes {
    errcode: number;
    errmsg: string;
    result: DingTalkUserInfo;
    request_id: string;
}
export interface DingTalkUserInfo {
    device_id: string;
    name: string;
    sys: boolean;
    sys_level: number;
    unionid: string;
    userid: string;
}
export interface getDingTalkUserInfoProperty {
    appId: string;
    code: string;
}
export interface DingTalkMessageProperty {
    accessToken: string;
    content: string;
}
export interface App {
    id: string;
    appKey: string;
    appName: string;
    appSecret: string;
    type: number;
    class: number;
    suiteTicket: string;
    suiteSecret: string;
    suiteId: string;
    suiteKey: string;
    agentId: string;
    authCorpId: string;
    status: boolean;
    createdAt: string;
    updatedAt: string;
}
export interface AppSelectProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
    curPageNo?: number;
    pageSize?: number;
    startAt?: number;
    endAt?: number;
}
export interface AppInsertProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}
export interface AppUpdateProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}
export interface AppDeleteProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}
export interface AccessTokenData {
    expireIn: number;
    expireAt: number;
    accessToken: string;
}
export interface DingTalkUserInfoRes {
    errcode: number;
    errmsg: string;
    result: DingTalkUserInfo;
    request_id: string;
}
export interface DingTalkUserInfo {
    device_id: string;
    name: string;
    sys: boolean;
    sys_level: number;
    unionid: string;
    userid: string;
}
export declare class AppGetDingTalkUserInfo {
    appId?: string;
    code?: string;
}
export interface DingTalkMessageInterface {
    accessToken: string;
    content: string;
}
export interface AppSendDingTalkMessage {
    appId: string;
    template_id: string;
    userid_list?: string;
    dept_id_list?: string;
    data: string;
}
export interface AppSendWxMessage {
    appId: string;
    template_id: string;
    touser: string;
    page: string;
    form_id: string;
    emphasis_keyword: string;
    data: any;
}
export interface getAppUserInfoData {
    session_key: string;
    openid: string;
    unionid: string;
}
export interface GetAccessTokenProperty {
    appId?: string;
}
export interface AuthProperty {
    username: string;
    password: string;
}
export interface AuthData {
    access_token: string;
    expiration: number;
    overdueDateTs: number;
    overdueDate: string;
}
export declare function Mc(service: any, isDebugMode?: boolean): {
    role: Request<Role, RoleInsertProperty, RoleDeleteProperty, RoleUpdateProperty, RoleSelectProperty>;
    manager: Request<Manager, ManagerInsertProperty, ManagerDeleteProperty, ManagerUpdateProperty, ManagerSelectProperty>;
    access: Request<Access, AccessInsertProperty, AccessDeleteProperty, AccessUpdateProperty, AccessSelectProperty>;
    role_access: Request<RoleAccess, RoleAccessInsertProperty, RoleAccessDeleteProperty, RoleAccessUpdateProperty, RoleAccessSelectProperty>;
    app: Request<App, AppInsertProperty, AppDeleteProperty, AppUpdateProperty, AppSelectProperty>;
    getAuth: (json: AuthProperty) => Promise<{
        code: number;
        msg: string;
        data: AuthData;
    }>;
    getVersion: () => Promise<any>;
    getAccessToken: (appid: string) => Promise<{
        code;
        msg;
        data: AccessTokenData;
    }>;
    /**
     * 废弃，使用 getAppUserInfo
     * @param json
     */
    getDingTalkUserInfo: (json: getDingTalkUserInfoProperty) => Promise<DingTalkUserInfoRes>;
    getAppUserInfo: (json: AppGetDingTalkUserInfo) => Promise<IRes<getAppUserInfoData>>;
    getUserPhoneNo: (json: AppGetDingTalkUserInfo) => Promise<IRes<getAppUserInfoData>>;
    sendDingTalkMessage: (json: AppSendDingTalkMessage) => Promise<any>;
    sendWeiXinMessage: (json: AppSendWxMessage) => Promise<any>;
    getAccessByRole: (roleId: number) => Promise<Access[]>;
    updateRoleAccessBatch: (json: RoleAccessUpdateBatchProperty) => Promise<IRes>;
};
export declare function getAuth(json: AuthProperty, service: any): Promise<{
    code: number;
    msg: string;
    data: AuthData;
}>;
