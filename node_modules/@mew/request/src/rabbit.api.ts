import {AxiosInstance} from "axios";

// import axiosAdapterUniapp from "axios-adapter-uniapp";

export interface OpenDoorData{
    cabinet:string
}

export interface PayLoadData{
    payload_bytes: number,
    redelivered: boolean,
    exchange: string,
    routing_key: string,
    message_count: number,
    properties: { delivery_mode: number, headers: {} },
    payload: string,
    payload_encoding: string
}

export default class RabbitApi {
    exchangeName:string=''
    queueName:string=''
    _service:any
    constructor(service: AxiosInstance) {
        this._service = service
    }
    async permissions(){
        return await this._get(`/api/vhosts/%2f/permissions`)
    }
    async bind(exchangeName:any,queueName:any,routingKey:any){
        this.exchangeName=exchangeName
        this.queueName=queueName
        const data={"routing_key":routingKey, "arguments":{}}
        return await this._post(`/api/bindings/%2f/e/${exchangeName}/q/${queueName}`,data)
    }
    async newQueue(queueName:any){
        this.queueName=queueName
        const data={"auto_delete":false,"durable":true,"arguments":{},"node":"rabbit@v5"}
        return await this._put(`/api/queues/%2f/${queueName}`,data)
    }
    async deleteQueue(queueName:any){
        const data={"type":"topic","auto_delete":false,"durable":true,"internal":false,"arguments":{}}
        return await this._delete(`/api/queues/%2f/${queueName}`,data)
    }
    async newExchange(exchangeName:any){
        this.exchangeName=exchangeName
        const data={"type":"topic","auto_delete":false,"durable":true,"internal":false,"arguments":{}}
        return await this._put(`/api/exchanges/%2f/${exchangeName}`,data)
    }
    async deleteExchange(exchangeName:any){
        const data={"type":"topic","auto_delete":false,"durable":true,"internal":false,"arguments":{}}
        return await this._delete(`/api/exchanges/%2f/${exchangeName}`,data)
    }
    async consumers(){
        const res = await this._get('/api/consumers')
        let arr=[]
        for (const item of res) {
            // @ts-ignore
            arr.push(item.channel_details.user)
        }
        // console.log(arr)
        return res
    }
    async overview(){
        return await this._get('/api/overview')
    }
    async users(){
        return await this._get('/api/users')
    }
    // 开门
    async openDoor(payload:OpenDoorData){
        const data = {
            properties:{},
            routing_key:"web.device.openDoor",
            payload:JSON.stringify(payload),
            payload_encoding:"string"
        }
        return  await this.pubToExchanges(data)
    }
    async fakeDoorStatusChange(){
        const payload ={
            location:'A01-01',
            lockStatus:true
        }
        const data = {
            properties:{},
            routing_key:"device.web.doorStatus",
            payload:JSON.stringify(payload),
            payload_encoding:"string"
        }
        await this.pubToExchanges(data)
    }
    // 发布到exchange
    async pubToExchanges(data:any){
        // console.log('pubToExchanges')
        const url = `/api/exchanges/%2f//publish`
        // const url = `/api/exchanges/%2f/${this.exchangeName}/publish`
        // console.log(97,url,data)
        const res = await this._post(url,data)
        console.log(100,res)
        return res
    }
    // 发布到queue
    async pubToQueue(data:any){
        const url = `/api/queues/%2f/${this.exchangeName}/publish`
        const res =  await this._post(url,data)
        console.log(104,res)
        return res
    }
    // 接受消息
    async getLockStatus(location:string):Promise<boolean | undefined>{
        console.log('getLockStatus')
        const res = await this._getMessage()
        console.log(102, res)
        const acceptArr:PayLoadData[] = []
        const rejectArr:PayLoadData[] = []
        res.forEach(element=>{
            // console.log(104, element)
            try {
                const json =JSON.parse(element.payload)
                if(json.location===location){
                    acceptArr.push(element)
                }else{
                    rejectArr.push(element)
                }
            } catch(e){
                console.log(e)
            }
        })
        console.log({acceptArr, rejectArr})
        // 非自己的消息 重新发布返回队列 虽然不够优雅也是能解决问题
        for (const element of rejectArr) {
            const json = {properties:{},routing_key:element.routing_key,payload:element.payload,payload_encoding:"string"}
            await this.pubToExchanges(json)
        }
        const last = acceptArr.pop()
        if(last){
            try {
                const json =JSON.parse(last.payload)
                return json.status as boolean
            }catch (e) {
                console.log(140,e)
            }
        }
        return
    }

    async _getMessage():Promise<PayLoadData[]> {
        const data={
            "count": 100,
            "ackmode": "ack_requeue_false",
            "encoding": "auto",
            "truncate": 50000
        }
        return await this._post(`/api/queues/%2f/${this.exchangeName}.*.web/get`, data)
    }

    private async _post(uri: string, params = {}, msg = '') {
        try {
            // console.log(151,uri,params)
            const res = await this._service.post(uri, params)
            // console.log(153,res)
            // console.log('POST',this._service.defaults.baseURL,uri,params, msg, 'success')
            return res.data
        } catch (error) {
            // store.state.msgSuccess = msg + '失败'
            console.log(error)
            console.log('POST',this._service.defaults.baseURL,uri,params, msg, error)
            throw error
        }
    }
    private async _put(uri: string, params = {}, msg = '') {
        try {
            // console.log(92,uri,params)
            const res = await this._service.put(uri, params)
            // console.log(94,res)
            // console.log('PUT',this._service.defaults.baseURL,uri,params, msg, 'success')
            return res.data
        } catch (error) {
            // store.state.msgSuccess = msg + '失败'
            console.log(error)
            console.log('PUT',this._service.defaults.baseURL,uri,params, msg, error)
            throw error
        }
    }
    private async _delete(uri: string, params = {}, msg = '') {
        try {
            // console.log(92,uri,params)
            const res = await this._service.delete(uri, params)
            // console.log(94,res)
            // console.log('DELETE',this._service.defaults.baseURL,uri,params, msg, 'success')
            return res.data
        } catch (error) {
            // store.state.msgSuccess = msg + '失败'
            console.log(error)
            console.log('DELETE',this._service.defaults.baseURL,uri,params, msg, error)
            throw error
        }
    }
    private async _get(uri: string, params = {}, msg = '') {
        try {
            // console.log(53,uri,params)
            const res = await this._service.get(uri, params)
            // console.log(29,res)
            // console.log('GET',this._service.defaults.baseURL,uri,params, msg, 'success')
            return res.data
        } catch (error) {
            // store.state.msgSuccess = msg + '失败'
            console.log(error)
            console.log('GET',this._service.defaults.baseURL,uri,params, msg, error)
            throw error
        }
    }
}
