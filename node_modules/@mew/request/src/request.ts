import {AxiosInstance, AxiosRequestConfig, Method} from "axios";

export interface IRes<T = any> {
    code: number
    msg: string
    data: T
    total?: number
    error?: string
}

export interface IResType<T = any> {
    code: number
    msg: string
    data: T[]
    total?: number
    error?: string
}

/**
 * 请求用类来集成
 */
export class Request<T, I, D, U, S> {
    private _uri: string
    private _service: AxiosInstance
    private _isDebugMode: boolean
    private _timeout: number

    constructor(uri: string, service: any, isDebugMode: boolean = false, timeout: number = 10000) {
        this._uri = uri
        this._service = service
        this._isDebugMode = isDebugMode
        this._timeout = timeout
    }

    async insert(params: I): Promise<IResType<T>> {
        return await mewMsPost(this._uri + '/insert', params, this._service, this._isDebugMode, this._timeout)
    }

    async delete(params: D): Promise<IResType<T>> {
        return await mewMsDelete(this._uri + '/delete', params, this._service, this._isDebugMode, this._timeout)
    }

    /**
     * 用于dingtalk小程序
     * remove 相当于 post /xc/xxx/delete
     * @param params
     */
    async remove(params: D): Promise<IResType<T>> {
        return await mewMsRemove(this._uri + '/delete', params, this._service, this._isDebugMode, this._timeout)
    }

    async update(params: U): Promise<IResType<T>> {
        return await mewMsPost(this._uri + '/update', params, this._service, this._isDebugMode, this._timeout)
    }

    async find(params: S): Promise<IResType<T>> {
        return await mewMsPost(this._uri + '/find', params, this._service, this._isDebugMode, this._timeout)
    }

    async select(params: S): Promise<IResType<T>> {
        return await mewMsPost(this._uri + '/select', params, this._service, this._isDebugMode, this._timeout)
    }
}

/**
 * 米鸥科技封装-微服务Post请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 */
export async function mewMsPost<T>(url: string, params: {} = {}, service: any, isDebugMode: boolean = false, timeout: number = 10000) {
    return await mewMsRequest<T>(url, params, 'POST', service, isDebugMode, timeout)
}

/**
 * 米鸥科技封装-微服务Get请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 */
export async function mewMsGet<T>(url: string, params: {} = {}, service: any, isDebugMode: boolean = false, timeout: number = 10000) {
    return await mewMsRequest<T>(url, params, 'GET', service, isDebugMode, timeout)
}

/**
 * 米鸥科技封装-微服务Put请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 */
export async function mewMsPut<T>(url: string, params: {} = {}, service: any, isDebugMode: boolean = false, timeout: number = 10000) {
    return await mewMsRequest<T>(url, params, 'PUT', service, isDebugMode, timeout)
}

/**
 * 米鸥科技封装-微服务Delete请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 */
export async function mewMsDelete<T>(url: string, params: {} = {}, service: any, isDebugMode: boolean = false, timeout: number = 10000) {
    return await mewMsRequest<T>(url, params, 'POST', service, isDebugMode, timeout)
}

/**
 * 米鸥科技封装-微服务Delete请求-用于dingtalk小程序-相当于 post /xc/xxx/delete
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 */
export async function mewMsRemove<T>(url: string, params: {} = {}, service: any, isDebugMode: boolean = false, timeout: number = 10000) {
    return await mewMsRequest<T>(url, params, 'POST', service, isDebugMode, timeout)
}

/**
 * 米鸥科技封装-微服务Request请求
 * @param url
 * @param params
 * @param method
 * @param service
 * @param isDebugMode
 * @param timeout
 */
export async function mewMsRequest<T>(url: string, params: {} = {}, method: Method = 'POST', service: any, isDebugMode: boolean = false, timeout: number = 10000): Promise<IResType<T>> {
    const res = await mewRequest(url, params, method, service, isDebugMode, timeout)
    if (res.code === 0) {
        return res
    } else {
        throw new Error(res.error)
    }
}

/**
 * 米鸥科技封装Request请求
 * @param url BaseURL+uri
 * @param params
 * @param method
 * @param service
 * @param timeout
 * @param isDebugMode true:调试模式 false:正常模式(默认)
 */
export async function mewRequest(url: string, params: {} = {}, method: Method = 'POST', service: any, isDebugMode: boolean = false, timeout: number = 10000) {
    try {
        const config: AxiosRequestConfig = {
            url: url,
            method: method,
            data: params,
        }
        if (isDebugMode) console.log(config)
        const res = await service.request(config)
        if (isDebugMode) console.log(url,res)
        return res.data
    } catch (error) {
        console.log(service.defaults.baseURL + url, JSON.stringify(params), error)
        throw error
    }
}
