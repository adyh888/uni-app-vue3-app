# 自动生成对应的class
# 需要本地存在entity文件
# 输入的文件路径要全路径,根据路径查询对应的中心


import os
from string import Template

interfaceTplFilePath = r'interface.tpl'
# 根目录
RootPath = r'E:\\git\\5.0.2'

# 单个属性模板
propertyTmeple = "\t\t${Name}: new Request<${MainName}, ${MainName}InsertProperty, ${MainName}DeleteProperty, ${MainName}UpdateProperty, ${MainName}SelectProperty>('/${Center}/${Name}', service, isDebugMode),\n"

print("使用自动生成前,确保先存在entity文件,且字段的说明使用双引号包围,而不是单引号!")
EntityPath = input(
    "输入entity的名称或全路径(例如全路径:E:\git\5.0.2\booher.ms.dc.nestjs\src\entity\content.entity.ts,或者输入名称:content,输入名称需要在代码中设置RootPath):")
Center = input("输入所属中心(例如:lc):")
# IsUpdate = input("是否更新(0是1否,默认否):")

if EntityPath.find(":\\") != -1:
    print("全路径模式")
    arr1 = EntityPath.split('\\')
    if not os.path.exists(EntityPath):
        print(EntityPath+"文件不存在!")
    entityFile = open(EntityPath, encoding='utf-8')
    arr2 = arr1[len(arr1) - 1].split('.')
    LowercaseName = arr2[0]
else:
    print("相对路径模式")
    if not os.path.exists(os.path.join(RootPath, "booher.ms." + Center +
                                       ".nestjs\src\entity", EntityPath+".entity.ts")):
        print(EntityPath+"文件不存在!")
    entityFile = open(os.path.join(RootPath, "booher.ms." + Center +
                      ".nestjs\src\entity", EntityPath+".entity.ts"), encoding='utf-8')
    LowercaseName = EntityPath

arr3 = LowercaseName.split('_')

UppercaseName = ""

for name1 in arr3:
    print(name1)
    UppercaseName += name1.capitalize()

print("UppercaseName", UppercaseName)

lines = []
tpl = Template(propertyTmeple)
lines.append(tpl.substitute(
    Name=LowercaseName,
    MainName=UppercaseName,
    Center=Center,
))

print(lines[0])

index2 = 0
entityArr = []

entityLines = entityFile.readlines()
entityFile.close()
# print("entityLines", entityLines)
for index in range(len(entityLines)):
    line = entityLines[index].replace(" ", "")
    if len(line) != 0 and not line.startswith("\n") and line.startswith("@") and not line.startswith("@Entity()") and not line.startswith("@Index"):
        nextLine = entityLines[index + 1]
        nextLine = nextLine.replace(" ", "").replace(";", "").replace("\n", "")
        arr = nextLine.split(':')
        if arr[0] == 'createdAt' or arr[0] == 'updatedAt' or arr[0] == 'id':  # 这些字段在模板内已存在
            continue
        entityArr.append(arr)  # 获取所有的属性字段和类型
        if line.find("nullable:true") == -1:
            entityArr[index2].append("true")
        else:
            entityArr[index2].append("false")
        index2 += 1

print("entityArr", entityArr)

lines2 = []
tplFile = open(interfaceTplFilePath, encoding='utf-8')  # 模板文件
tpl2 = Template(tplFile.read())
lines2.append(tpl2.substitute(
    MainName=UppercaseName,
))
tplFile.close()

len1 = len(UppercaseName + " {")
strList = list(lines2[0])
for entity in entityArr:
    strList.insert(lines2[0].index(
        UppercaseName + " {") + len1, "\n    " + entity[0] + ": " + entity[1])
lines2[0] = ''.join(strList)

len1 = len("interface " + UppercaseName + "Property {")
index = lines2[0].index(
    "interface " + UppercaseName + "Property {")
strList = list(lines2[0])
for entity in entityArr:
    strList.insert(index + len1, "\n    " + entity[0] + "?: " + entity[1])
lines2[0] = ''.join(strList)

len1 = len(UppercaseName + "InsertProperty extends " +
           UppercaseName + "Property {")
index = lines2[0].index(
    UppercaseName + "InsertProperty extends " + UppercaseName + "Property {")
strList = list(lines2[0])
for entity in entityArr:
    if entity[2] != "false":
        strList.insert(index + len1, "\n    "+entity[0]+": " + entity[1])
lines2[0] = ''.join(strList)

# 如果是更新,先要找到对应的属性
# if IsUpdate == 0 :
#     print("")
#     with open(Center+".ts", "r", encoding="utf-8") as f1,open("%s.bak" % Center, "w+", encoding="utf-8") as f2:
#         for line in f1:
#             if line.find(UppercaseName + " {") > 0 or line.find(UppercaseName + "{") > 0 :

#             f2.write(line)
#     os.remove(Center+".ts")
#     os.rename("%s.bak" % Center, Center + ".ts")

# print("lines2", lines2[0])

if not os.path.exists(Center+".ts"):
    print(Center+".ts"+"文件不存在!")

with open(Center+".ts", "r", encoding="utf-8") as f1, open("%s.bak" % Center, "w+", encoding="utf-8") as f2:
    for line in f1:
        if "// class" in line:
            f2.write(lines[0])
        if "// interface" in line:
            f2.write(lines2[0])
        f2.write(line)
os.remove(Center+".ts")
os.rename("%s.bak" % Center, Center + ".ts")

print("生成完毕")
input("请输入任意按键退出:")
