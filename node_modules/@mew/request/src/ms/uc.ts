import {mewMsPost, mewRequest, Request} from "../request";
import {Company, Department, Device, Group, Team} from "./dc";
import {
    Location,
    LocationDeleteProperty,
    LocationInsertProperty,
    LocationSelectProperty,
    LocationUpdateProperty
} from "./gc";


export interface Role {
    status?: boolean
    description?: string
    teamId?: number
    groupId?: number
    companyId?: number
    name?: string
    id?: number

}

export interface RoleSelectProperty extends Role {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface RoleUpdateProperty extends Role {
    id: number

}

export interface RoleInsertProperty extends Role {
    status: boolean
    description: string
    companyId: number
    name: string

}

export interface RoleDeleteProperty extends Role {
    id: number

}

// Access
export interface Access {
    id: number;
    moduleName: string;
    actionName: string;
    type: number;
    url: string;
    moduleId: number;
    sort: number;
    description: string;
    status: boolean;
    createdAt: string;
    updatedAt: string;
}

export interface AccessSelectProperty {
    id: number;
    moduleName: string;
    actionName: string;
    type: number;
    url: string;
    moduleId: number;
    sort: number;
    description: string;
    status: boolean;
    pageSize?: number;
    curPageNo?: number;
    startAt?: Date;
    endAt?: Date;
}

export interface AccessUpdateProperty {
    id: number;
    moduleName?: string;
    actionName?: string;
    type?: number;
    url?: string;
    moduleId?: number;
    sort?: number;
    description?: string;
    status?: boolean;
}

export interface AccessInsertProperty {
    id: number;
    moduleName: string;
    actionName: string;
    type: number;
    url: string;
    moduleId: number;
    sort: number;
    description: string;
    status: boolean;
}

export interface AccessDeleteProperty {
    id: number;
    moduleName: string;
    actionName: string;
    type: number;
    url: string;
    moduleId: number;
    sort: number;
    description: string;
    status: boolean;
}

// TODO: RoleAccess

export interface Personnel {
    villageInfo?: string
    cardNo?: string
    phoneNo?: string
    enabled?: boolean
    fullName?: string
    id?: number

}

export interface PersonnelSelectProperty extends Personnel {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface PersonnelUpdateProperty extends Personnel {
    id: number

}

export interface PersonnelInsertProperty extends Personnel {
    fullName: string

}

export interface PersonnelDeleteProperty extends Personnel {
    id: number

}

export interface Address {
    isDefault: boolean
    uid: number
    address: string
    area: string
    id: number
    startAt?: number
    endAt?: number
}

export interface AddressProperty {
    isDefault?: boolean
    uid?: number
    address?: string
    area?: string
    id?: number
}

export interface AddressSelectProperty extends AddressProperty {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface AddressUpdateProperty extends AddressProperty {
    id: number
}

export interface AddressInsertProperty extends AddressProperty {
    isDefault: boolean
    uid: number
    address: string
    area: string

}

export interface AddressDeleteProperty extends AddressProperty {
    id: number
}

export interface UserTool {
    status: boolean
    groupId: number
    companyId: number
    maxNum: number
    curNum: number
    toolId: number
    deviceId: string
    uid: number
    id: number
    startAt?: number
    endAt?: number
}

export interface UserToolProperty {
    status?: boolean
    groupId?: number
    companyId?: number
    maxNum?: number
    curNum?: number
    toolId?: number
    deviceId?: string
    uid?: number
    id?: number
}

export interface UserToolSelectProperty extends UserToolProperty {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface UserToolUpdateProperty extends UserToolProperty {
    id: number
}

export interface UserToolInsertProperty extends UserToolProperty {
    status: boolean
    toolId: number
    deviceId: string
    uid: number
}

export interface UserToolDeleteProperty extends UserToolProperty {
    id: number
}

export interface RoleToolAccess {
    status: boolean
    groupId: number
    companyId: number
    maxNum: number
    uid: number
    username: string
    specificationId: number
    toolId: number
    deviceId: string
    roleId: number
    id: number
    startAt?: number
    endAt?: number
}

export interface RoleToolAccessProperty {
    status?: boolean
    groupId?: number
    companyId?: number
    maxNum?: number
    uid?: number
    username?: string
    specificationId?: number
    toolId?: number
    deviceId?: string
    roleId?: number
    id?: number
}

export interface RoleToolAccessSelectProperty extends RoleToolAccessProperty {
    toolName?: string
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface RoleToolAccessUpdateProperty extends RoleToolAccessProperty {
    id: number
}

export interface RoleToolAccessInsertProperty extends RoleToolAccessProperty {
    status: boolean
    maxNum: number
    deviceId: string
    uidArr?: number[]
    roleIdArr?: number[]
    toolIdArr?: number[]
}

export interface RoleToolAccessDeleteProperty extends RoleToolAccessProperty {
    id: number
}

export interface Occupation {
    desc: string
    status: boolean
    groupId: number
    companyId: number
    departmentId: number
    name: string
    id: number
    startAt?: number
    endAt?: number
}

export interface OccupationProperty {
    desc?: string
    status?: boolean
    groupId?: number
    companyId?: number
    departmentId?: number
    name?: string
    id?: number
}

export interface OccupationSelectProperty extends OccupationProperty {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface OccupationUpdateProperty extends OccupationProperty {
    id: number
}

export interface OccupationInsertProperty extends OccupationProperty {
    status: boolean
    groupId: number
    companyId: number
    name: string

}

export interface OccupationDeleteProperty extends OccupationProperty {
    id: number
}
export interface Position {
    desc: string
    status: boolean
    groupId: number
    companyId: number
    departmentId: number
    name: string
    id: number
    startAt?: number
    endAt?: number
}

export interface PositionProperty {
    desc?: string
    status?: boolean
    groupId?: number
    companyId?: number
    departmentId?: number
    name?: string
    id?: number
}

export interface PositionSelectProperty extends PositionProperty {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface PositionUpdateProperty extends PositionProperty {
    id: number
}

export interface PositionInsertProperty extends PositionProperty {
    status: boolean
    groupId: number
    companyId: number
    name: string

}

export interface PositionDeleteProperty extends PositionProperty {
    id: number
}
// interface
// User
export interface User {
    id: number
    roleId: number
    username: string
    phoneNo: string
    password: string
    unionid: string
    occupationIdArr: string
    positionIdArr: string
    cardId: number
    faceId: number
    fingerId: number
    status: boolean
    companyId: number
    departmentId: number
    groupId: number
    teamId: number
    familyId: number
    joinFamilyTime: number
    isDelete: boolean
    createdAt: number
    updatedAt: number
    card: Card
    face: Face
    finger: Finger
    role: Role
    group: Group
    company: Company
    department: Department
    team: Team
}

export interface UserSelectProperty {
    id?: number
    roleId?: number
    username?: string
    password?: string
    occupationIdArr?: string
    positionIdArr?: string
    unionid?: string
    villageName?: string
    cardId?: number
    cardNo?: string
    faceId?: number
    fingerId?: number
    status?: boolean
    groupId?: number
    departmentId?: number
    companyId?: number
    teamId?: number
    familyId?: number
    phoneNo?: string
    selectParams?: string[]
    familyIdArr?: number[]
    roleCheck?: boolean
    namePrecise?: boolean
    ifDetail?: boolean
    isDelete?: boolean
    pageSize?: number
    joinFamilyTime?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface UserUpdateProperty {
    id: number
    roleId?: number
    username?: string
    phoneNo?: string
    occupationIdArr?: string
    positionIdArr?: string
    occupationName?: string
    positionName?: string
    password?: string
    unionid?: string
    faceId?: number
    joinFamilyTime?: number
    fingerId?: number
    cardId?: number
    status?: boolean
    groupId?: number
    departmentId?: number
    companyId?: number
    teamId?: number
    familyId?: number
    email?: string
    firstName?: string
}

export interface UserInsertProperty {
    id?: number
    roleId: number
    username?: string
    firstName?: string
    phoneNo?: string
    password?: string
    unionid?: string
    occupationIdArr?: string
    positionIdArr?: string
    cardId?: number
    faceId?: number
    fingerId?: number
    status?: boolean
    groupId: number
    joinFamilyTime: number
    departmentId: number
    companyId: number
    teamId: number
    familyId?: number
}

export interface UserRegisterProperty {
    id?: number
    username: string
    phoneNo?: string
    jobNo?: string
    password?: string
    unionid?: string
    cardId?: number
    cardNo?: string
    fingerprint?: string
    fingerFeatureData?: string
    occupationIdArr?: string
    positionIdArr?: string
    fingerNo?: number
    faceFeatureData?: string
    featureData?: string
    faceId?: number
    fingerId?: number
    status?: boolean
    groupId: number
    departmentId: number
    companyId: number
    teamId: number
    familyId?: number
    joinFamilyTime?: number
    firstName?: string

    deviceIdArr: string[]
    roleIdArr: number[]
}

export interface UserDeleteProperty {
    id?: number
    isDelete?: boolean
    roleId?: number
    occupationIdArr?: string
    positionIdArr?: string
    username?: string
    phoneNo?: string
    password?: string
    unionid?: string
    cardId?: number
    faceId?: number
    fingerId?: number
    status?: boolean
    groupId?: number
    departmentId?: number
    companyId?: number
    teamId?: number
    familyId?: number
    joinFamilyTime?: number
}

export interface UserModifyProperty {
    uid: number
    cardNo?: string
    username?: string
    phoneNo?: string
    password?: string
    unionid?: string
    occupationIdArr?: string
    positionIdArr?: string
    cardId?: number
    faceId?: number
    fingerId?: number
    status?: boolean
    groupId?: number
    departmentId?: number
    companyId?: number
    teamId?: number
    familyId?: number
    deviceIdArr?: string[]
    roleIdArr?: number[]
}


// DeviceUser
export interface DeviceUser {
    id: number
    uid: number
    deviceId: string
    email: string
    enabled: boolean
    power: boolean
    roleId: number
    roleId2: number
    rights: string
    mode: number
    deleted: string
    createdAt: string
    updatedAt: string
    user: User
}

export interface DeviceUserInsertProperty {
    id?: number
    uid?: number
    deviceId?: string
    email?: string
    enabled?: boolean
    rights?: string
    roleId?: number
    roleId2?: number
    power?: boolean
    uidArr?: string[]
}

export interface DeviceUserDeleteProperty {
    id?: number
    uid?: number
    deviceId?: string
    email?: string
    enabled?: boolean
    rights?: string
    roleId?: number
    roleId2?: number
    power?: boolean
}

export interface DeviceUserUpdateProperty {
    id: number
    uid?: number
    deviceId?: string
    email?: string
    enabled?: boolean
    rights?: string
    roleId?: number
    roleId2?: number
    power?: boolean
}

export interface DeviceUserSelectProperty {
    id?: number
    uid?: number
    username?: string
    deviceId?: string
    cardNo?: string
    email?: string
    enabled?: boolean
    rights?: string
    roleId?: number
    roleId2?: number
    roleCheck?: boolean
    power?: boolean
    groupId?: number
    companyId?: number
    departmentId?: number
    teamId?: number
    mode?: number
    pageSize?: number
    curPageNo?: number
    startAt?: Date
    endAt?: Date
}

export interface DeviceUserDetail {
    id: number
    uid: number
    deviceId: string
    email: string
    enabled: boolean
    power: boolean
    roleId: number
    rights: string
    mode: number
    createdAt: string
    updatedAt: string
    device: Device
    user: User
    role: Role
    card: Card
}


// Card
export interface Card {
    id: number
    cardNo: string
    password: string
    status: boolean
    createdAt: number
    updatedAt: number
}

export interface CardDetail extends Card {
    username: string
    createdAt: number
    updatedAt: number
    cardNo: string
}

export interface CardSelectProperty {
    id?: number
    username?: string
    uid?: number
    cardNo?: string
    password?: string
    status?: boolean
    ifOnly?: boolean
    ifDetail?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: Date
    endAt?: Date
}

export interface CardUpdateProperty {
    id: number
    uid?: number
    cardNo?: string
    password?: string
    status?: boolean
}

export interface CardInsertProperty {
    id?: number
    uid?: number
    cardNo: string
    password?: string
    status: boolean
}

export interface CardDeleteProperty {
    id?: number
    uid?: number
    cardNo?: string
    password?: string
    status?: boolean
}


// Finger
export interface Finger {
    id: number;
    deviceId: string;
    no: number;
    fingerprint: string;
    createdAt: string
    updatedAt: string
}

export interface FingerInsertProperty {
    id?: number;
    uid?: number;
    deviceId: string;
    no: number;
    fingerprint: string;
}

export interface FingerDeleteProperty {
    id?: number;
    deviceId?: string;
    no?: number;
}

export interface FingerUpdateProperty {
    id: number;
    uid?: number;
    deviceId?: string;
    no?: number;
    fingerprint?: string;
}

export interface FingerSelectProperty {
    id?: number;
    deviceId?: string;
    no?: number;
    fingerprint?: string;
    curPageNo?: number;
    pageSize?: number;
    startAt?: number;
    endAt?: number;
}


// Face
export interface Face {
    id: number;
    featureData: string;
    age: number;
    gender: number;
    liveness: boolean;
    createdAt: string
    updatedAt: string
}

export interface FaceInsertProperty {
    id?: number;
    uid?: number;
    featureData: string;
    age?: number;
    gender?: number;
    liveness?: boolean;
    face?: string[];
}

export interface FaceUpdateProperty {
    id: number;
    uid?: number;
    featureData?: string;
    age?: number;
    gender?: number;
    liveness?: boolean;
}

export interface FaceSelectProperty {
    id?: number;
    uid?: number;
    featureData?: string;
    age?: number;
    gender?: number;
    liveness?: boolean;
    deviceId?: string;
    companyId?: number;
    pageSize?: number;
    curPageNo?: number;
    startAt?: Date;
    endAt?: Date;
}

export interface FaceDeleteProperty {
    id?: number;
    uid?: number;
    featureData?: string;
    age?: number;
    gender?: number;
    liveness?: boolean;
}


// Wx
export interface Wx {
    id: number
    appid: string
    appName: string
    secret: string
    status: boolean
    createdAt: string
    updatedAt: string
}

export interface WxInsertProperty {
    appid?: string;
    secret?: string;
    status?: boolean;
    appName?: string
}

export interface WxUpdateProperty {
    id?: number;
    appid?: string;
    secret?: string;
    status?: boolean;
    appName?: string
}

export interface WxSelectProperty {
    id?: number;
    appid?: string;
    secret?: string;
    appName?: string
    status?: boolean;
    startAt?: number;
    endAt?: number;
    curPageNo?: number;
    pageSize?: number;
}

export interface WxDeleteProperty {
    appid?: string;
    secret?: string;
    status?: boolean;
    appName?: string
}

export interface WxGetAccessTokenProperty {
    appid: string
}

export interface WxGetSessionKeyProperty {
    appid: string
    code: string
}

export interface WxUserInfoEncryptProperty {
    appid: string
    session_key: string
    encryptedData: string
    iv: string
    rawData: string
    signature: string
    userInfo: {}
    errMsg?: string
    appName?: string
}

export interface WxUserInfoEncryptProperty {
    appid: string
    session_key: string
    encryptedData: string
    iv: string
    rawData: string
    signature: string
    userInfo: {}
    errMsg?: string
    appName?: string
}


// WxUser
export interface WxUser {
    id: number
    appid: string
    openid: string
    nickname: string
    avatarUrl: string
    gender: number
    country: string
    province: string
    city: string
    // eslint-disable-next-line camelcase
    access_token: string
    // eslint-disable-next-line camelcase
    expires_in: number
    // eslint-disable-next-line camelcase
    session_key: string
    // eslint-disable-next-line camelcase
    unionid: string
    companyId: number
    status: boolean
    createdAt: number
    updatedAt: number
}

export interface WxUserInsertProperty {
    appid?: string;
    openid?: string;
    nickname?: string;
    avatarUrl?: string;
    gender?: number;
    country?: string;
    province?: string;
    city?: string;
    access_token?: string;
    expires_in?: number;
    unionid?: string;
    companyId?: number;
    uid?: number;
    status?: boolean;
}

export interface WxUserUpdateProperty {
    id?: number;
    appid?: string;
    openid?: string;
    nickname?: string;
    avatarUrl?: string;
    gender?: number;
    country?: string;
    province?: string;
    city?: string;
    access_token?: string;
    expires_in?: number;
    session_key?: string;
    unionid?: string;
    status?: boolean;
    companyId?: number;
    uid?: number;
}

export interface WxUserSelectProperty {
    id?: number;
    appid?: string;
    secret?: string;
    unionid?: string;
    companyId?: number;
    uid?: number;
    nickname?: string;
    status?: boolean;
    startAt?: number;
    endAt?: number;
    curPageNo?: number;
    pageSize?: number;
}

export interface WxUserDeleteProperty {
    id?: number;
    appid?: string;
    secret?: string;
    companyId?: number;
    uid?: number;
    nickname?: string;
    status?: boolean;
    startAt?: number;
    endAt?: number;
    curPageNo?: number;
    pageSize?: number;
}


// DingTalkUser
export interface DingTalkUser {
    id: string
    appId: string
    nickname: string
    avatarUrl: string
    access_token: string
    unionid: string
    companyId: number
    uid: number
    user: User
    status: boolean
    createdAt: number
    updatedAt: number
}

export interface DingTalkUserInsertProperty {
    id: string
    appId: string
    nickname: string
    avatarUrl?: string
    access_token?: string
    unionid?: string
    companyId?: number
    userId?: string //钉钉 userid
    uid: number
    status?: boolean
}

export interface DingTalkUserUpdateProperty {
    id?: string
    appId?: string
    nickname?: string;
    avatarUrl?: string;
    access_token?: string;
    unionid?: string;
    companyId?: number;
    userId?: string //钉钉 userid
    uid: number
    status?: boolean
}

export interface DingTalkUserSelectProperty {
    id?: string
    appId?: string
    nickname?: string;
    avatarUrl?: string;
    access_token?: string;
    unionid?: string;
    companyId?: number;
    userId?: string //钉钉 userid
    uid?: number
    status?: boolean
}

export interface DingTalkUserDeleteProperty {
    id?: string
    appId?: string
    secret?: string;
    companyId?: number;
    uid?: number;
    nickname?: string;
    status?: boolean;
    startAt?: number;
    endAt?: number;
    curPageNo?: number;
    pageSize?: number;
}

// Village
export interface Village {
    id: number
    villageName: string
    building: string
    unit: string
    room: string
    createdAt: number
    updatedAt: number
}

export interface VillageSelectProperty {
    id?: number
    villageName?: string
    building?: string
    unit?: string
    room?: string
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface VillageInsertProperty {
    id?: number
    villageName: string
    building?: string
    unit?: string
    room?: string
}

export interface VillageUpdateProperty {
    id: number
    villageName?: string
    building?: string
    unit?: string
    room?: string
}

export interface VillageDeleteProperty {
    id: number
    villageName?: string
    building?: string
    unit?: string
    room?: string
}


// UserCompany
export interface UserCompany {
    id: number
    uid: number
    companyId: number
    enabled: boolean
    createdAt: number
    updatedAt: number
}

export interface UserCompanySelectProperty {
    id?: number
    uid?: number
    companyId?: number
    enabled?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface UserCompanyInsertProperty {
    id?: number
    uid: number
    companyId: number
    enabled: boolean
}

export interface UserCompanyUpdateProperty {
    id?: number
    uid: number
    companyId: number
    enabled: boolean
}

export interface UserCompanyDeleteProperty {
    id: number
    uid: number
    companyId: number
    enabled: boolean
}


// UserDepartment
export interface UserDepartment {
    id: number
    uid: number
    departmentId: number
    enabled: boolean
    createdAt: number
    updatedAt: number
}

export interface UserDepartmentSelectProperty {
    id?: number
    uid?: number
    departmentId?: number
    enabled?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface UserDepartmentInsertProperty {
    id: number
    uid?: number
    departmentId?: number
    enabled?: boolean
}

export interface UserDepartmentUpdateProperty {
    id: number
    uid?: number
    departmentId?: number
    enabled?: boolean
}

export interface UserDepartmentDeleteProperty {
    id?: number
    uid?: number
    departmentId?: number
    enabled?: boolean
}


// UserGroup
export interface UserGroup {
    id: number
    uid: number
    groupId: number
    enabled: boolean
    createdAt: number
    updatedAt: number
}

export interface UserGroupSelectProperty {
    id?: number
    uid?: number
    groupId?: number
    enabled?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface UserGroupInsertProperty {
    id?: number
    uid: number
    groupId: number
    enabled: boolean
}

export interface UserGroupUpdateProperty {
    id?: number
    uid: number
    groupId: number
    enabled: boolean
}

export interface UserGroupDeleteProperty {
    id?: number
    uid?: number
    groupId?: number
    enabled?: boolean
}


// UserTeam
export interface UserTeam {
    id: number
    uid: number
    teamId: number
    enabled: boolean
    createdAt: number
    updatedAt: number
}

export interface UserTeamSelectProperty {
    id?: number
    uid?: number
    teamId?: number
    enabled?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface UserTeamInsertProperty {
    id?: number
    uid: number
    teamId: number
    enabled: boolean
}

export interface UserTeamUpdateProperty {
    id: number
    uid?: number
    teamId?: number
    enabled?: boolean
}

export interface UserTeamDeleteProperty {
    id?: number
    uid?: number
    teamId?: number
    enabled?: boolean
}


// Rank
export interface Rank {
    id: number
    type: string
    curRank: number
    maxRank: number
    curIntegral: number
    totalIntegral: number
    uid: number
    typeId: number
    familyId: number
    username: string
    createdAt: number
    updatedAt: number
}

export interface RankSelectProperty {
    username?: number
    uid?: number
    totalIntegral?: number
    curIntegral?: number
    maxRank?: number
    curRank?: number
    type?: string
    id?: number
    typeId?: number
    familyId?: number
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface RankInsertProperty {
    username?: number
    uid?: number
    totalIntegral: number
    curIntegral: number
    maxRank?: number
    curRank?: number
    typeId: number
    familyId?: number
    type?: string
    id?: number
}

export interface RankUpdateProperty {
    username?: number
    uid?: number
    totalIntegral: number
    curIntegral: number
    maxRank?: number
    curRank?: number
    typeId?: number
    familyId?: number
    type?: string
    id: number
    addIntegral?: number
}

export interface RankDeleteProperty {
    username?: number
    uid?: number
    totalIntegral: number
    curIntegral: number
    maxRank?: number
    curRank?: number
    typeId?: number
    familyId?: number
    type?: string
    id: number
}


// DeviceRoleAccess
export interface DeviceRoleAccess {
    id: number
    roleId: number
    deviceId: string
    name: string
    access: string[]
    createdAt: number
    updatedAt: number
}

export interface DeviceRoleAccessSelectProperty {
    id?: number
    roleId?: number
    deviceId?: string
    name?: string
    pageSize?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface DeviceRoleAccessInsertProperty {
    id?: number
    roleId: number
    deviceId: string
    name: string
    access: string[]
}

export interface DeviceRoleAccessUpdateProperty {
    id: number
    roleId?: number
    deviceId?: string
    name?: string
    access?: string[]
}

export interface DeviceRoleAccessDeleteProperty {
    id?: number
    roleId?: number
    deviceId?: string
    name?: string
    access?: string[]
}

export function Uc(service: any, isDebugMode: boolean = false) {
    return {
        role: new Request<Role, RoleInsertProperty, RoleDeleteProperty, RoleUpdateProperty, RoleSelectProperty>('/uc/role', service, isDebugMode),
        personnel: new Request<Personnel, PersonnelInsertProperty, PersonnelDeleteProperty, PersonnelUpdateProperty, PersonnelSelectProperty>('/uc/personnel', service, isDebugMode),
        address: new Request<Address, AddressInsertProperty, AddressDeleteProperty, AddressUpdateProperty, AddressSelectProperty>('/uc/address', service, isDebugMode),
        access: new Request<Access, AccessInsertProperty, AccessDeleteProperty, AccessUpdateProperty, AccessSelectProperty>('/uc/access', service, isDebugMode),
        // TODO: role_access: new Request<RoleAccess, RoleAccessInsertProperty, RoleAccessDeleteProperty, RoleAccessUpdateProperty, RoleAccessSelectProperty>('/mc/role_access', service, isDebugMode),
        user_tool: new Request<UserTool, UserToolInsertProperty, UserToolDeleteProperty, UserToolUpdateProperty, UserToolSelectProperty>('/uc/user_tool', service, isDebugMode),
        role_tool_access: new Request<RoleToolAccess, RoleToolAccessInsertProperty, RoleToolAccessDeleteProperty, RoleToolAccessUpdateProperty, RoleToolAccessSelectProperty>('/uc/role_tool_access', service, isDebugMode),
		occupation: new Request<Occupation, OccupationInsertProperty, OccupationDeleteProperty, OccupationUpdateProperty, OccupationSelectProperty>('/uc/occupation', service, isDebugMode),
		position: new Request<Position, PositionInsertProperty, PositionDeleteProperty, PositionUpdateProperty, PositionSelectProperty>('/uc/position', service, isDebugMode),
        // class
        rfid: new Request<Location, LocationInsertProperty, LocationDeleteProperty, LocationUpdateProperty, LocationSelectProperty>('/gc/rfid', service, isDebugMode),
        user: new Request<User, UserInsertProperty, UserDeleteProperty, UserUpdateProperty, UserSelectProperty>('/uc/user', service, isDebugMode),
        device_user: new Request<DeviceUser, DeviceUserInsertProperty, DeviceUserDeleteProperty, DeviceUserUpdateProperty, DeviceUserSelectProperty>('/uc/device_user', service, isDebugMode),
        card: new Request<Card, CardInsertProperty, CardDeleteProperty, CardUpdateProperty, CardSelectProperty>('/uc/card', service, isDebugMode),
        finger: new Request<Finger, FingerInsertProperty, FingerDeleteProperty, FingerUpdateProperty, FingerSelectProperty>('/uc/finger', service, isDebugMode),
        face: new Request<Face, FaceInsertProperty, FaceDeleteProperty, FaceUpdateProperty, FaceSelectProperty>('/uc/face', service, isDebugMode),
        wx: new Request<Wx, WxInsertProperty, WxDeleteProperty, WxUpdateProperty, WxSelectProperty>('/uc/wx', service, isDebugMode),
        wx_user: new Request<WxUser, WxUserInsertProperty, WxUserDeleteProperty, WxUserUpdateProperty, WxUserSelectProperty>('/uc/wx_user', service, isDebugMode),
        ding_talk_user: new Request<DingTalkUser, DingTalkUserInsertProperty, DingTalkUserDeleteProperty, DingTalkUserUpdateProperty, DingTalkUserSelectProperty>('/uc/ding_talk_user', service, isDebugMode),
        village: new Request<Village, VillageInsertProperty, VillageDeleteProperty, VillageUpdateProperty, VillageSelectProperty>('/uc/village', service, isDebugMode),
        user_company: new Request<UserCompany, UserCompanyInsertProperty, UserCompanyDeleteProperty, UserCompanyUpdateProperty, UserCompanySelectProperty>('/uc/user_company', service, isDebugMode),
        user_department: new Request<UserDepartment, UserDepartmentInsertProperty, UserDepartmentDeleteProperty, UserDepartmentUpdateProperty, UserDepartmentSelectProperty>('/uc/user_department', service, isDebugMode),
        user_group: new Request<UserGroup, UserGroupInsertProperty, UserGroupDeleteProperty, UserGroupUpdateProperty, UserGroupSelectProperty>('/uc/user_group', service, isDebugMode),
        user_team: new Request<UserTeam, UserTeamInsertProperty, UserTeamDeleteProperty, UserTeamUpdateProperty, UserTeamSelectProperty>('/uc/user_team', service, isDebugMode),
        rank: new Request<Rank, RankInsertProperty, RankDeleteProperty, RankUpdateProperty, RankSelectProperty>('/uc/rank', service, isDebugMode),
        device_role_access: new Request<DeviceRoleAccess, DeviceRoleAccessInsertProperty, DeviceRoleAccessDeleteProperty, DeviceRoleAccessUpdateProperty, DeviceRoleAccessSelectProperty>('/uc/device_role_access', service, isDebugMode),
        // function
        getVersion: () => mewRequest('/gc/select/version', {}, 'POST', service, isDebugMode),
        registerUser: async function (json: UserRegisterProperty) {
            const res = await mewMsPost(`/uc/user/register`, json, service, isDebugMode)
            return {
                code: res.code as number,
                msg: res.msg as string,
                data: res.data as User[]
            }
        },
        modifyUser: async function (json: UserModifyProperty) {
            const res = await mewMsPost(`/uc/user/modify`, json, service, isDebugMode)
            return {
                code: res.code as number,
                data: res.data as User[]
            }
        }
    }
}
