import {IRes, IResType, mewMsPost, mewRequest, Request} from "../request";
import {AxiosInstance} from "axios";

export interface Role {
    grade?: number
    groupId?: number
    companyId?: number
    teamId?: string
    status?: boolean
    description?: string
    name?: string
    id?: number

}

export interface RoleSelectProperty extends Role {
    curPageNo?: number
    pageSize?: number
    startAt?: number
    endAt?: number
}

export interface RoleUpdateProperty extends Role {
    id: number

}

export interface RoleInsertProperty extends Role {
    grade: number
    status: boolean
    description: string
    name: string

}

export interface RoleDeleteProperty extends Role {
    id: number

}

// interface
// TODO 此处如果新增，需要修改 initDepartmentList 切记
export enum RoleName {
    unauthorized = 'unauthorized',
    company = 'company',
    company2 = 'company2',
    admin = 'admin',
    super = 'super',
    gtadmin = "gtadmin",
    gtdepart = 'gtdepart',
    gtdepart1 = 'gtdepart1'
}

export interface AuthProperty {
    username: string;
    password: string;
}

/// mc.manager
export interface Manager {
    id: number
    username: string
    password: string
    roleId: number
    groupId: number
    companyId: number
    departmentId: number
    teamId: string
    unionid: string
    status: boolean
    isSuper: boolean
    avatarUrl: string
    createdAt: string
    updatedAt: string
}

export interface ManagerSelectProperty {
    id?: number
    companyId?: number
    groupId?: number
    departmentId?: number
    teamId?: string
    roleIdTest?: string
    username?: string
    password?: string
    roleId?: number
    unionid?: string
    status?: boolean
    isSuper?: boolean
    avatarUrl?: string
    pageSize?: number
    curPageNo?: number
    startAt?: Date
    endAt?: Date
}

export interface ManagerUpdateProperty {
    id: number
    username?: string
    password?: string
    roleId?: number
    unionid?: string
    status?: boolean
    isSuper?: boolean
    groupId?: number
    companyId?: number
    departmentId?: number
    teamId?: string
    avatarUrl?: string
}

export interface ManagerInsertProperty {
    id?: number
    username: string
    password: string
    roleId: number
    unionid?: string
    status: boolean
    isSuper: boolean
    groupId?: number
    companyId: number
    departmentId?: number
    teamId?: string
}

export interface ManagerDeleteProperty {
    id?: number
    username?: string
    password?: string
    roleId?: number
    unionid?: string
    status?: boolean
    isSuper?: boolean
    groupId?: number
    companyId?: number
    departmentId?: number
    teamId?: string
    avatarUrl?: string
}


/// mc.access
export interface Access {
    id: number
    moduleName: string
    actionName: string
    type: number
    url: string
    moduleId: number
    sort: number
    description: string
    icon: string
    status: boolean
    createdAt: string
    updatedAt: string
    children: Access[]
}

export interface AccessSelectProperty {
    id?: number
    moduleName?: string
    actionName?: string
    type?: number
    url?: string
    moduleId?: number
    sort?: number
    description?: string
    icon?: string
    status?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: Date
    endAt?: Date
}

export interface AccessUpdateProperty {
    id: number
    moduleName?: string
    actionName?: string
    type?: number
    url?: string
    moduleId?: number
    sort?: number
    description?: string
    icon?: string
    status?: boolean
}

export interface AccessInsertProperty {
    id?: number     // 可传id因为可能需要多环境公用配置
    moduleName: string
    actionName: string
    type: number
    url: string
    moduleId: number
    sort: number
    description?: string
    icon?: string
    status: boolean
}

export interface AccessDeleteProperty {
    id: number
    moduleName?: string
    actionName?: string
    type?: number
    url?: string
    moduleId?: number
    sort?: number
    description?: string
    icon?: string
    status?: boolean
}

//role_access
export interface RoleAccess {
    id: number
    roleId: number
    accessId: number
    enabled: boolean
    createdAt: number
    updatedAt: number
}

export interface RoleAccessSelectProperty {
    id?: number
    inOrder?: boolean
    accessDetail?: boolean
    roleId?: number
    accessId?: number
    enabled?: boolean
    pageSize?: number
    curPageNo?: number
    startAt?: number
    endAt?: number
}

export interface RoleAccessUpdateProperty {
    id: number
    roleId?: number
    accessId?: number
    enabled?: boolean
}

export interface RoleAccessDeleteProperty {
    id?: number
    roleId?: number
    accessId?: number
    enabled?: boolean
}

export interface RoleAccessInsertProperty {
    id?: number
    roleId: number
    accessId: number
    enabled?: boolean
    accessIdArr?: []
}

export interface RoleAccessUpdateBatchProperty {
    roleId: number
    accessIdArr: number[]
}

// App
export interface App {
    id: string;
    appKey: string;
    appName: string
    appSecret: string;
    type: number;
    class: number;
    suiteTicket: string;
    suiteSecret: string;
    suiteId: string;
    suiteKey: string;
    agentId: string;
    authCorpId: string;
    status: boolean;
    createdAt: string
    updatedAt: string
}

export interface AppSelectProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
    curPageNo?: number;
    pageSize?: number;
    startAt?: number;
    endAt?: number;
}

export interface AppInsertProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}

export interface AppUpdateProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}

export interface AppDeleteProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}

//auth
export interface AuthData {
    access_token: string
    expiration: number
    overdueDateTs: number
    overdueDate: string
}


export interface AccessTokenData {
    expireIn: number
    expireAt: number
    accessToken: string
}


export interface DingTalkUserInfoRes {
    errcode: number,
    errmsg: string,
    result: DingTalkUserInfo,
    request_id: string
}

export interface DingTalkUserInfo {
    device_id: string,
    name: string,
    sys: boolean,
    sys_level: number,
    unionid: string,
    userid: string
}

export interface getDingTalkUserInfoProperty {
    appId: string,
    code: string
}

export interface DingTalkMessageProperty {
    accessToken: string,
    content: string
}


// App
export interface App {
    id: string;
    appKey: string;
    appName: string
    appSecret: string;
    type: number;
    class: number;
    suiteTicket: string;
    suiteSecret: string;
    suiteId: string;
    suiteKey: string;
    agentId: string;
    authCorpId: string;
    status: boolean;
    createdAt: string
    updatedAt: string
}

export interface AppSelectProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
    curPageNo?: number;
    pageSize?: number;
    startAt?: number;
    endAt?: number;
}

export interface AppInsertProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}

export interface AppUpdateProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}

export interface AppDeleteProperty {
    id?: string;
    status?: boolean;
    secret?: string;
    class?: number;
    type?: number;
    appName?: string;
    suiteTicket?: string;
    suiteSecret?: string;
    suiteId?: string;
    suiteKey?: string;
    agentId?: string;
    authCorpId?: string;
    appid?: string;
}

export interface AccessTokenData {
    expireIn: number
    expireAt: number
    accessToken: string
}

export interface DingTalkUserInfoRes {
    errcode: number,
    errmsg: string,
    result: DingTalkUserInfo,
    request_id: string
}

export interface DingTalkUserInfo {
    device_id: string,
    name: string,
    sys: boolean,
    sys_level: number,
    unionid: string,
    userid: string
}

export class AppGetDingTalkUserInfo {
    appId?: string;
    code?: string;
}

export interface DingTalkMessageInterface {
    accessToken: string,
    content: string
}

export interface AppSendDingTalkMessage {
    appId: string;
    template_id: string;
    userid_list?: string;
    dept_id_list?: string;
    data: string;
}

export interface AppSendWxMessage {
    appId: string;
    template_id: string;
    touser: string;
    page: string;
    form_id: string;
    emphasis_keyword: string;
    data: any;
}

export interface getAppUserInfoData {
    session_key: string
    openid: string
    unionid: string
}

export interface GetAccessTokenProperty {
    appId?: string;
}

export interface AuthProperty {
    username: string;
    password: string;
}

//auth
export interface AuthData {
    access_token: string
    expiration: number
    overdueDateTs: number
    overdueDate: string
}

export function Mc(service: any, isDebugMode: boolean = false) {
    return {
        role: new Request<Role, RoleInsertProperty, RoleDeleteProperty, RoleUpdateProperty, RoleSelectProperty>('/mc/role', service, isDebugMode),
        // class
        manager: new Request<Manager, ManagerInsertProperty, ManagerDeleteProperty, ManagerUpdateProperty, ManagerSelectProperty>('/mc/manager', service, isDebugMode),
        access: new Request<Access, AccessInsertProperty, AccessDeleteProperty, AccessUpdateProperty, AccessSelectProperty>('/mc/access', service, isDebugMode),
        role_access: new Request<RoleAccess, RoleAccessInsertProperty, RoleAccessDeleteProperty, RoleAccessUpdateProperty, RoleAccessSelectProperty>('/mc/role_access', service, isDebugMode),
        app: new Request<App, AppInsertProperty, AppDeleteProperty, AppUpdateProperty, AppSelectProperty>('/mc/app', service, isDebugMode),
        // function
        getAuth: (json: AuthProperty) => mewRequest('/auth', json, 'POST', service) as Promise<{ code: number, msg: string, data: AuthData }>,
        getVersion: () => mewRequest('/mc/select/version', {}, 'POST', service, isDebugMode),
        getAccessToken: async (appid: string): Promise<{ code, msg, data: AccessTokenData }> => {
            return await mewRequest('/mc/app/getAccessToken', {appid}, 'POST', service, isDebugMode)
        },
        // getCorpAccessToken: async (json:GetAccessTokenProperty): Promise<{ code, msg, data: AccessTokenData }> => {
        //     return await mewRequest( '/mc/app/getCorpAccessToken', json,'POST', service,isDebugMode)
        // },
        /**
         * 废弃，使用 getAppUserInfo
         * @param json
         */
        getDingTalkUserInfo: async (json: getDingTalkUserInfoProperty): Promise<DingTalkUserInfoRes> => {
            return await mewRequest('/mc/app/getDingTalkUserInfo', json, 'POST', service, isDebugMode)
        },
        getAppUserInfo: async (json: AppGetDingTalkUserInfo): Promise<IRes<getAppUserInfoData>> => {
            return await mewRequest('/mc/app/getUserInfo', json, 'POST', service, isDebugMode)
        },
        getUserPhoneNo: async (json: AppGetDingTalkUserInfo): Promise<IRes<getAppUserInfoData>> => {
            return await mewRequest('/mc/app/getUserPhoneNo', json, 'POST', service, isDebugMode)
        },
        sendDingTalkMessage: async (json: AppSendDingTalkMessage) => {
            return await mewRequest('/mc/app/sendDingTalkMessage', json, 'POST', service, isDebugMode)
        },
        sendWeiXinMessage: async (json: AppSendWxMessage) => {
            return await mewRequest('/mc/app/sendWxMessage', json, 'POST', service, isDebugMode)
        },
        getAccessByRole: async function (roleId: number): Promise<Access[]> {
            const res = await this.role_access.select({roleId})
            console.log(res)
            const arr = res.data
            const accessIds: number[] = []
            const arr2: any[] = []
            if (arr.length > 0) {
                arr.forEach(item => {
                    accessIds.push(item.accessId)
                    arr2.push(this.access.select({id: item.accessId, type: 1}))
                })
            }
            // console.log({accessIds})
            const results = await Promise.all(arr2)
            const arr3: Access[] = []
            results.forEach(element => {
                if (element.data.length === 1) {
                    element.data[0].children = element.data[0].children.filter(item => {//2级
                        return accessIds.indexOf(item.id) >= 0
                    })
                    if(element.data[0].children.length > 0){
                        for (let i = 0; i < element.data[0].children.length; i++) {
                            let children = element.data[0].children[i].children
                            let children2:any[] = []
                            if(children.length > 0){
                                children.forEach(item => {
                                    for (let j = 0; j < arr.length; j++) {
                                        if(item.id == arr[j].accessId && roleId == arr[j].roleId){
                                            children2.push(item)
                                        }
                                    }
                                })
                                element.data[0].children[i].children = children2
                            }
                        }
                    }
                    arr3.push(element.data[0])
                }
            })
            // console.log(arr3)
            return arr3
        },
        // 批量修改角色权限
        updateRoleAccessBatch: async (json: RoleAccessUpdateBatchProperty): Promise<IRes> => {
            const res = await mewMsPost(`/mc/role_access/update/batch`, json, service, isDebugMode)
            return res
        },
    }

}

export function getAuth(json: AuthProperty, service) {
    return mewRequest('/auth', json, 'POST', service) as Promise<{ code: number, msg: string, data: AuthData }>
}
